/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish, Overrides, BytesLike } from "ethers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  BoundContractView,
  ContractContext,
  ContractView,
  DummyProvider,
  EthChainId,
  TypedCallTrace,
  EthContext,
  EthFetchConfig,
  PreprocessResult,
  encodeCallData,
} from "@sentio/sdk/eth";
import { EthCallParam, EthCallContext, PreparedData } from "@sentio/protos";

import { Pyth__factory } from "./index.js";
import {
  Pyth,
  AdminChangedEvent,
  AdminChangedEventFilter,
  BatchPriceFeedUpdateEvent,
  BatchPriceFeedUpdateEventFilter,
  BeaconUpgradedEvent,
  BeaconUpgradedEventFilter,
  ContractUpgradedEvent,
  ContractUpgradedEventFilter,
  DataSourcesSetEvent,
  DataSourcesSetEventFilter,
  FeeSetEvent,
  FeeSetEventFilter,
  GovernanceDataSourceSetEvent,
  GovernanceDataSourceSetEventFilter,
  OwnershipTransferredEvent,
  OwnershipTransferredEventFilter,
  PriceFeedUpdateEvent,
  PriceFeedUpdateEventFilter,
  UpgradedEvent,
  UpgradedEventFilter,
  ValidPeriodSetEvent,
  ValidPeriodSetEventFilter,
  PythInternalStructs,
  PythStructs,
  PythGovernanceInstructions,
} from "./Pyth.js";

export interface ChainIdCallObject {}

export type ChainIdCallTrace = TypedCallTrace<[], ChainIdCallObject>;

export interface ExecuteGovernanceInstructionCallObject {
  encodedVM: string;
}

export type ExecuteGovernanceInstructionCallTrace = TypedCallTrace<
  [string],
  ExecuteGovernanceInstructionCallObject
>;

export interface GetEmaPriceCallObject {
  id: string;
}

export type GetEmaPriceCallTrace = TypedCallTrace<
  [string],
  GetEmaPriceCallObject
>;

export interface GetEmaPriceNoOlderThanCallObject {
  id: string;
  age: bigint;
}

export type GetEmaPriceNoOlderThanCallTrace = TypedCallTrace<
  [string, bigint],
  GetEmaPriceNoOlderThanCallObject
>;

export interface GetEmaPriceUnsafeCallObject {
  id: string;
}

export type GetEmaPriceUnsafeCallTrace = TypedCallTrace<
  [string],
  GetEmaPriceUnsafeCallObject
>;

export interface GetPriceCallObject {
  id: string;
}

export type GetPriceCallTrace = TypedCallTrace<[string], GetPriceCallObject>;

export interface GetPriceNoOlderThanCallObject {
  id: string;
  age: bigint;
}

export type GetPriceNoOlderThanCallTrace = TypedCallTrace<
  [string, bigint],
  GetPriceNoOlderThanCallObject
>;

export interface GetPriceUnsafeCallObject {
  id: string;
}

export type GetPriceUnsafeCallTrace = TypedCallTrace<
  [string],
  GetPriceUnsafeCallObject
>;

export interface GetUpdateFee_bytes_arrayCallObject {
  updateData: string[];
}

export type GetUpdateFee_bytes_arrayCallTrace = TypedCallTrace<
  [string[]],
  GetUpdateFee_bytes_arrayCallObject
>;

export interface GetUpdateFee_uint256CallObject {
  updateDataSize: bigint;
}

export type GetUpdateFee_uint256CallTrace = TypedCallTrace<
  [bigint],
  GetUpdateFee_uint256CallObject
>;

export interface GetValidTimePeriodCallObject {}

export type GetValidTimePeriodCallTrace = TypedCallTrace<
  [],
  GetValidTimePeriodCallObject
>;

export interface GovernanceDataSourceCallObject {}

export type GovernanceDataSourceCallTrace = TypedCallTrace<
  [],
  GovernanceDataSourceCallObject
>;

export interface GovernanceDataSourceIndexCallObject {}

export type GovernanceDataSourceIndexCallTrace = TypedCallTrace<
  [],
  GovernanceDataSourceIndexCallObject
>;

export interface HashDataSourceCallObject {
  ds: PythInternalStructs.DataSourceStructOutput;
}

export type HashDataSourceCallTrace = TypedCallTrace<
  [PythInternalStructs.DataSourceStructOutput],
  HashDataSourceCallObject
>;

export interface InitializeCallObject {
  wormhole: string;
  dataSourceEmitterChainIds: bigint[];
  dataSourceEmitterAddresses: string[];
  governanceEmitterChainId: bigint;
  governanceEmitterAddress: string;
  governanceInitialSequence: bigint;
  validTimePeriodSeconds: bigint;
  singleUpdateFeeInWei: bigint;
}

export type InitializeCallTrace = TypedCallTrace<
  [string, bigint[], string[], bigint, string, bigint, bigint, bigint],
  InitializeCallObject
>;

export interface IsValidDataSourceCallObject {
  dataSourceChainId: bigint;
  dataSourceEmitterAddress: string;
}

export type IsValidDataSourceCallTrace = TypedCallTrace<
  [bigint, string],
  IsValidDataSourceCallObject
>;

export interface IsValidGovernanceDataSourceCallObject {
  governanceChainId: bigint;
  governanceEmitterAddress: string;
}

export type IsValidGovernanceDataSourceCallTrace = TypedCallTrace<
  [bigint, string],
  IsValidGovernanceDataSourceCallObject
>;

export interface LastExecutedGovernanceSequenceCallObject {}

export type LastExecutedGovernanceSequenceCallTrace = TypedCallTrace<
  [],
  LastExecutedGovernanceSequenceCallObject
>;

export interface LatestPriceInfoPublishTimeCallObject {
  priceId: string;
}

export type LatestPriceInfoPublishTimeCallTrace = TypedCallTrace<
  [string],
  LatestPriceInfoPublishTimeCallObject
>;

export interface OwnerCallObject {}

export type OwnerCallTrace = TypedCallTrace<[], OwnerCallObject>;

export interface ParseAuthorizeGovernanceDataSourceTransferPayloadCallObject {
  encodedPayload: string;
}

export type ParseAuthorizeGovernanceDataSourceTransferPayloadCallTrace =
  TypedCallTrace<
    [string],
    ParseAuthorizeGovernanceDataSourceTransferPayloadCallObject
  >;

export interface ParseGovernanceInstructionCallObject {
  encodedInstruction: string;
}

export type ParseGovernanceInstructionCallTrace = TypedCallTrace<
  [string],
  ParseGovernanceInstructionCallObject
>;

export interface ParsePriceFeedUpdatesCallObject {
  updateData: string[];
  priceIds: string[];
  minPublishTime: bigint;
  maxPublishTime: bigint;
}

export type ParsePriceFeedUpdatesCallTrace = TypedCallTrace<
  [string[], string[], bigint, bigint],
  ParsePriceFeedUpdatesCallObject
>;

export interface ParseRequestGovernanceDataSourceTransferPayloadCallObject {
  encodedPayload: string;
}

export type ParseRequestGovernanceDataSourceTransferPayloadCallTrace =
  TypedCallTrace<
    [string],
    ParseRequestGovernanceDataSourceTransferPayloadCallObject
  >;

export interface ParseSetDataSourcesPayloadCallObject {
  encodedPayload: string;
}

export type ParseSetDataSourcesPayloadCallTrace = TypedCallTrace<
  [string],
  ParseSetDataSourcesPayloadCallObject
>;

export interface ParseSetFeePayloadCallObject {
  encodedPayload: string;
}

export type ParseSetFeePayloadCallTrace = TypedCallTrace<
  [string],
  ParseSetFeePayloadCallObject
>;

export interface ParseSetValidPeriodPayloadCallObject {
  encodedPayload: string;
}

export type ParseSetValidPeriodPayloadCallTrace = TypedCallTrace<
  [string],
  ParseSetValidPeriodPayloadCallObject
>;

export interface ParseUpgradeContractPayloadCallObject {
  encodedPayload: string;
}

export type ParseUpgradeContractPayloadCallTrace = TypedCallTrace<
  [string],
  ParseUpgradeContractPayloadCallObject
>;

export interface PriceFeedExistsCallObject {
  id: string;
}

export type PriceFeedExistsCallTrace = TypedCallTrace<
  [string],
  PriceFeedExistsCallObject
>;

export interface ProxiableUUIDCallObject {}

export type ProxiableUUIDCallTrace = TypedCallTrace<
  [],
  ProxiableUUIDCallObject
>;

export interface PythUpgradableMagicCallObject {}

export type PythUpgradableMagicCallTrace = TypedCallTrace<
  [],
  PythUpgradableMagicCallObject
>;

export interface QueryPriceFeedCallObject {
  id: string;
}

export type QueryPriceFeedCallTrace = TypedCallTrace<
  [string],
  QueryPriceFeedCallObject
>;

export interface RenounceOwnershipCallObject {}

export type RenounceOwnershipCallTrace = TypedCallTrace<
  [],
  RenounceOwnershipCallObject
>;

export interface SingleUpdateFeeInWeiCallObject {}

export type SingleUpdateFeeInWeiCallTrace = TypedCallTrace<
  [],
  SingleUpdateFeeInWeiCallObject
>;

export interface TransferOwnershipCallObject {
  newOwner: string;
}

export type TransferOwnershipCallTrace = TypedCallTrace<
  [string],
  TransferOwnershipCallObject
>;

export interface UpdatePriceFeedsCallObject {
  updateData: string[];
}

export type UpdatePriceFeedsCallTrace = TypedCallTrace<
  [string[]],
  UpdatePriceFeedsCallObject
>;

export interface UpdatePriceFeedsIfNecessaryCallObject {
  updateData: string[];
  priceIds: string[];
  publishTimes: bigint[];
}

export type UpdatePriceFeedsIfNecessaryCallTrace = TypedCallTrace<
  [string[], string[], bigint[]],
  UpdatePriceFeedsIfNecessaryCallObject
>;

export interface UpgradeToCallObject {
  newImplementation: string;
}

export type UpgradeToCallTrace = TypedCallTrace<[string], UpgradeToCallObject>;

export interface UpgradeToAndCallCallObject {
  newImplementation: string;
  data: string;
}

export type UpgradeToAndCallCallTrace = TypedCallTrace<
  [string, string],
  UpgradeToAndCallCallObject
>;

export interface ValidDataSourcesCallObject {}

export type ValidDataSourcesCallTrace = TypedCallTrace<
  [],
  ValidDataSourcesCallObject
>;

export interface ValidTimePeriodSecondsCallObject {}

export type ValidTimePeriodSecondsCallTrace = TypedCallTrace<
  [],
  ValidTimePeriodSecondsCallObject
>;

export interface VersionCallObject {}

export type VersionCallTrace = TypedCallTrace<[], VersionCallObject>;

export interface WormholeCallObject {}

export type WormholeCallTrace = TypedCallTrace<[], WormholeCallObject>;

const templateContract = Pyth__factory.connect("0x0", DummyProvider);

export class PythContractView extends ContractView<Pyth> {
  constructor(contract: Pyth) {
    super(contract);
    this.callStatic.contract = contract;
  }

  async chainId(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("chainId()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getEmaPrice(
    id: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythStructs.PriceStructOutput> {
    try {
      return await this.contract.getFunction("getEmaPrice(bytes32)")(
        id,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getEmaPriceNoOlderThan(
    id: BytesLike,
    age: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythStructs.PriceStructOutput> {
    try {
      return await this.contract.getFunction(
        "getEmaPriceNoOlderThan(bytes32,uint256)",
      )(id, age, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getEmaPriceUnsafe(
    id: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythStructs.PriceStructOutput> {
    try {
      return await this.contract.getFunction("getEmaPriceUnsafe(bytes32)")(
        id,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getPrice(
    id: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythStructs.PriceStructOutput> {
    try {
      return await this.contract.getFunction("getPrice(bytes32)")(
        id,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getPriceNoOlderThan(
    id: BytesLike,
    age: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythStructs.PriceStructOutput> {
    try {
      return await this.contract.getFunction(
        "getPriceNoOlderThan(bytes32,uint256)",
      )(id, age, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getPriceUnsafe(
    id: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythStructs.PriceStructOutput> {
    try {
      return await this.contract.getFunction("getPriceUnsafe(bytes32)")(
        id,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getUpdateFee_bytes_array(
    updateData: BytesLike[],
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getUpdateFee(bytes[])")(
        updateData,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getUpdateFee_uint256(
    updateDataSize: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getUpdateFee(uint256)")(
        updateDataSize,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getValidTimePeriod(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getValidTimePeriod()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async governanceDataSource(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythInternalStructs.DataSourceStructOutput> {
    try {
      return await this.contract.getFunction("governanceDataSource()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async governanceDataSourceIndex(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("governanceDataSourceIndex()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async hashDataSource(
    ds: PythInternalStructs.DataSourceStruct,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction(
        "hashDataSource((uint16,bytes32))",
      )(ds, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isValidDataSource(
    dataSourceChainId: BigNumberish,
    dataSourceEmitterAddress: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction(
        "isValidDataSource(uint16,bytes32)",
      )(dataSourceChainId, dataSourceEmitterAddress, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isValidGovernanceDataSource(
    governanceChainId: BigNumberish,
    governanceEmitterAddress: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction(
        "isValidGovernanceDataSource(uint16,bytes32)",
      )(governanceChainId, governanceEmitterAddress, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async lastExecutedGovernanceSequence(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction(
        "lastExecutedGovernanceSequence()",
      )(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async latestPriceInfoPublishTime(
    priceId: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction(
        "latestPriceInfoPublishTime(bytes32)",
      )(priceId, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async owner(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("owner()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async parseAuthorizeGovernanceDataSourceTransferPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythGovernanceInstructions.AuthorizeGovernanceDataSourceTransferPayloadStructOutput> {
    try {
      return await this.contract.getFunction(
        "parseAuthorizeGovernanceDataSourceTransferPayload(bytes)",
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async parseGovernanceInstruction(
    encodedInstruction: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythGovernanceInstructions.GovernanceInstructionStructOutput> {
    try {
      return await this.contract.getFunction(
        "parseGovernanceInstruction(bytes)",
      )(encodedInstruction, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async parseRequestGovernanceDataSourceTransferPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythGovernanceInstructions.RequestGovernanceDataSourceTransferPayloadStructOutput> {
    try {
      return await this.contract.getFunction(
        "parseRequestGovernanceDataSourceTransferPayload(bytes)",
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async parseSetDataSourcesPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythGovernanceInstructions.SetDataSourcesPayloadStructOutput> {
    try {
      return await this.contract.getFunction(
        "parseSetDataSourcesPayload(bytes)",
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async parseSetFeePayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythGovernanceInstructions.SetFeePayloadStructOutput> {
    try {
      return await this.contract.getFunction("parseSetFeePayload(bytes)")(
        encodedPayload,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async parseSetValidPeriodPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythGovernanceInstructions.SetValidPeriodPayloadStructOutput> {
    try {
      return await this.contract.getFunction(
        "parseSetValidPeriodPayload(bytes)",
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async parseUpgradeContractPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythGovernanceInstructions.UpgradeContractPayloadStructOutput> {
    try {
      return await this.contract.getFunction(
        "parseUpgradeContractPayload(bytes)",
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async priceFeedExists(
    id: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("priceFeedExists(bytes32)")(
        id,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async proxiableUUID(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("proxiableUUID()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async pythUpgradableMagic(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("pythUpgradableMagic()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async queryPriceFeed(
    id: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythStructs.PriceFeedStructOutput> {
    try {
      return await this.contract.getFunction("queryPriceFeed(bytes32)")(
        id,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async singleUpdateFeeInWei(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("singleUpdateFeeInWei()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async validDataSources(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<PythInternalStructs.DataSourceStructOutput[]> {
    try {
      return await this.contract.getFunction("validDataSources()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async validTimePeriodSeconds(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("validTimePeriodSeconds()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async version(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("version()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async wormhole(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("wormhole()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  callStatic = {
    contract: this.contract,

    async executeGovernanceInstruction(
      encodedVM: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("executeGovernanceInstruction(bytes)")
          .staticCall(encodedVM, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async initialize(
      wormhole: string,
      dataSourceEmitterChainIds: BigNumberish[],
      dataSourceEmitterAddresses: BytesLike[],
      governanceEmitterChainId: BigNumberish,
      governanceEmitterAddress: BytesLike,
      governanceInitialSequence: BigNumberish,
      validTimePeriodSeconds: BigNumberish,
      singleUpdateFeeInWei: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "initialize(address,uint16[],bytes32[],uint16,bytes32,uint64,uint256,uint256)",
          )
          .staticCall(
            wormhole,
            dataSourceEmitterChainIds,
            dataSourceEmitterAddresses,
            governanceEmitterChainId,
            governanceEmitterAddress,
            governanceInitialSequence,
            validTimePeriodSeconds,
            singleUpdateFeeInWei,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async parsePriceFeedUpdates(
      updateData: BytesLike[],
      priceIds: BytesLike[],
      minPublishTime: BigNumberish,
      maxPublishTime: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<PythStructs.PriceFeedStructOutput[]> {
      try {
        return await this.contract
          .getFunction("parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)")
          .staticCall(
            updateData,
            priceIds,
            minPublishTime,
            maxPublishTime,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async renounceOwnership(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("renounceOwnership()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async transferOwnership(
      newOwner: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("transferOwnership(address)")
          .staticCall(newOwner, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async updatePriceFeeds(
      updateData: BytesLike[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("updatePriceFeeds(bytes[])")
          .staticCall(updateData, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async updatePriceFeedsIfNecessary(
      updateData: BytesLike[],
      priceIds: BytesLike[],
      publishTimes: BigNumberish[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
          )
          .staticCall(updateData, priceIds, publishTimes, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async upgradeTo(
      newImplementation: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("upgradeTo(address)")
          .staticCall(newImplementation, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("upgradeToAndCall(address,bytes)")
          .staticCall(newImplementation, data, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
  };

  encodeCall = {
    chainId(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "chainId", "function chainId()", []);
    },
    executeGovernanceInstruction(
      encodedVM: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "executeGovernanceInstruction",
        "function executeGovernanceInstruction(bytes)",
        [encodedVM],
      );
    },
    getEmaPrice(id: BytesLike, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getEmaPrice",
        "function getEmaPrice(bytes32)",
        [id],
      );
    },
    getEmaPriceNoOlderThan(
      id: BytesLike,
      age: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getEmaPriceNoOlderThan",
        "function getEmaPriceNoOlderThan(bytes32,uint256)",
        [id, age],
      );
    },
    getEmaPriceUnsafe(
      id: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getEmaPriceUnsafe",
        "function getEmaPriceUnsafe(bytes32)",
        [id],
      );
    },
    getPrice(id: BytesLike, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getPrice",
        "function getPrice(bytes32)",
        [id],
      );
    },
    getPriceNoOlderThan(
      id: BytesLike,
      age: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getPriceNoOlderThan",
        "function getPriceNoOlderThan(bytes32,uint256)",
        [id, age],
      );
    },
    getPriceUnsafe(id: BytesLike, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getPriceUnsafe",
        "function getPriceUnsafe(bytes32)",
        [id],
      );
    },
    getUpdateFee_bytes_array(
      updateData: BytesLike[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getUpdateFee",
        "function getUpdateFee(bytes[])",
        [updateData],
      );
    },
    getUpdateFee_uint256(
      updateDataSize: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getUpdateFee",
        "function getUpdateFee(uint256)",
        [updateDataSize],
      );
    },
    getValidTimePeriod(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getValidTimePeriod",
        "function getValidTimePeriod()",
        [],
      );
    },
    governanceDataSource(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "governanceDataSource",
        "function governanceDataSource()",
        [],
      );
    },
    governanceDataSourceIndex(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "governanceDataSourceIndex",
        "function governanceDataSourceIndex()",
        [],
      );
    },
    hashDataSource(
      ds: PythInternalStructs.DataSourceStruct,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "hashDataSource",
        "function hashDataSource((uint16,bytes32))",
        [ds],
      );
    },
    initialize(
      wormhole: string,
      dataSourceEmitterChainIds: BigNumberish[],
      dataSourceEmitterAddresses: BytesLike[],
      governanceEmitterChainId: BigNumberish,
      governanceEmitterAddress: BytesLike,
      governanceInitialSequence: BigNumberish,
      validTimePeriodSeconds: BigNumberish,
      singleUpdateFeeInWei: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "initialize",
        "function initialize(address,uint16[],bytes32[],uint16,bytes32,uint64,uint256,uint256)",
        [
          wormhole,
          dataSourceEmitterChainIds,
          dataSourceEmitterAddresses,
          governanceEmitterChainId,
          governanceEmitterAddress,
          governanceInitialSequence,
          validTimePeriodSeconds,
          singleUpdateFeeInWei,
        ],
      );
    },
    isValidDataSource(
      dataSourceChainId: BigNumberish,
      dataSourceEmitterAddress: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "isValidDataSource",
        "function isValidDataSource(uint16,bytes32)",
        [dataSourceChainId, dataSourceEmitterAddress],
      );
    },
    isValidGovernanceDataSource(
      governanceChainId: BigNumberish,
      governanceEmitterAddress: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "isValidGovernanceDataSource",
        "function isValidGovernanceDataSource(uint16,bytes32)",
        [governanceChainId, governanceEmitterAddress],
      );
    },
    lastExecutedGovernanceSequence(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "lastExecutedGovernanceSequence",
        "function lastExecutedGovernanceSequence()",
        [],
      );
    },
    latestPriceInfoPublishTime(
      priceId: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "latestPriceInfoPublishTime",
        "function latestPriceInfoPublishTime(bytes32)",
        [priceId],
      );
    },
    owner(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "owner", "function owner()", []);
    },
    parseAuthorizeGovernanceDataSourceTransferPayload(
      encodedPayload: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "parseAuthorizeGovernanceDataSourceTransferPayload",
        "function parseAuthorizeGovernanceDataSourceTransferPayload(bytes)",
        [encodedPayload],
      );
    },
    parseGovernanceInstruction(
      encodedInstruction: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "parseGovernanceInstruction",
        "function parseGovernanceInstruction(bytes)",
        [encodedInstruction],
      );
    },
    parsePriceFeedUpdates(
      updateData: BytesLike[],
      priceIds: BytesLike[],
      minPublishTime: BigNumberish,
      maxPublishTime: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "parsePriceFeedUpdates",
        "function parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)",
        [updateData, priceIds, minPublishTime, maxPublishTime],
      );
    },
    parseRequestGovernanceDataSourceTransferPayload(
      encodedPayload: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "parseRequestGovernanceDataSourceTransferPayload",
        "function parseRequestGovernanceDataSourceTransferPayload(bytes)",
        [encodedPayload],
      );
    },
    parseSetDataSourcesPayload(
      encodedPayload: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "parseSetDataSourcesPayload",
        "function parseSetDataSourcesPayload(bytes)",
        [encodedPayload],
      );
    },
    parseSetFeePayload(
      encodedPayload: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "parseSetFeePayload",
        "function parseSetFeePayload(bytes)",
        [encodedPayload],
      );
    },
    parseSetValidPeriodPayload(
      encodedPayload: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "parseSetValidPeriodPayload",
        "function parseSetValidPeriodPayload(bytes)",
        [encodedPayload],
      );
    },
    parseUpgradeContractPayload(
      encodedPayload: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "parseUpgradeContractPayload",
        "function parseUpgradeContractPayload(bytes)",
        [encodedPayload],
      );
    },
    priceFeedExists(id: BytesLike, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "priceFeedExists",
        "function priceFeedExists(bytes32)",
        [id],
      );
    },
    proxiableUUID(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "proxiableUUID",
        "function proxiableUUID()",
        [],
      );
    },
    pythUpgradableMagic(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "pythUpgradableMagic",
        "function pythUpgradableMagic()",
        [],
      );
    },
    queryPriceFeed(id: BytesLike, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "queryPriceFeed",
        "function queryPriceFeed(bytes32)",
        [id],
      );
    },
    renounceOwnership(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "renounceOwnership",
        "function renounceOwnership()",
        [],
      );
    },
    singleUpdateFeeInWei(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "singleUpdateFeeInWei",
        "function singleUpdateFeeInWei()",
        [],
      );
    },
    transferOwnership(
      newOwner: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "transferOwnership",
        "function transferOwnership(address)",
        [newOwner],
      );
    },
    updatePriceFeeds(
      updateData: BytesLike[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "updatePriceFeeds",
        "function updatePriceFeeds(bytes[])",
        [updateData],
      );
    },
    updatePriceFeedsIfNecessary(
      updateData: BytesLike[],
      priceIds: BytesLike[],
      publishTimes: BigNumberish[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "updatePriceFeedsIfNecessary",
        "function updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
        [updateData, priceIds, publishTimes],
      );
    },
    upgradeTo(
      newImplementation: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "upgradeTo",
        "function upgradeTo(address)",
        [newImplementation],
      );
    },
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "upgradeToAndCall",
        "function upgradeToAndCall(address,bytes)",
        [newImplementation, data],
      );
    },
    validDataSources(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "validDataSources",
        "function validDataSources()",
        [],
      );
    },
    validTimePeriodSeconds(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "validTimePeriodSeconds",
        "function validTimePeriodSeconds()",
        [],
      );
    },
    version(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "version", "function version()", []);
    },
    wormhole(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "wormhole", "function wormhole()", []);
    },
  };
}

export class PythBoundContractView extends BoundContractView<
  Pyth,
  PythContractView
> {
  async chainId(overrides?: Overrides): Promise<bigint> {
    return await this.view.chainId(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getEmaPrice(
    id: BytesLike,
    overrides?: Overrides,
  ): Promise<PythStructs.PriceStructOutput> {
    return await this.view.getEmaPrice(
      id,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getEmaPriceNoOlderThan(
    id: BytesLike,
    age: BigNumberish,
    overrides?: Overrides,
  ): Promise<PythStructs.PriceStructOutput> {
    return await this.view.getEmaPriceNoOlderThan(
      id,
      age,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getEmaPriceUnsafe(
    id: BytesLike,
    overrides?: Overrides,
  ): Promise<PythStructs.PriceStructOutput> {
    return await this.view.getEmaPriceUnsafe(
      id,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getPrice(
    id: BytesLike,
    overrides?: Overrides,
  ): Promise<PythStructs.PriceStructOutput> {
    return await this.view.getPrice(
      id,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getPriceNoOlderThan(
    id: BytesLike,
    age: BigNumberish,
    overrides?: Overrides,
  ): Promise<PythStructs.PriceStructOutput> {
    return await this.view.getPriceNoOlderThan(
      id,
      age,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getPriceUnsafe(
    id: BytesLike,
    overrides?: Overrides,
  ): Promise<PythStructs.PriceStructOutput> {
    return await this.view.getPriceUnsafe(
      id,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getUpdateFee_bytes_array(
    updateData: BytesLike[],
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.getUpdateFee_bytes_array(
      updateData,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getUpdateFee_uint256(
    updateDataSize: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.getUpdateFee_uint256(
      updateDataSize,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getValidTimePeriod(overrides?: Overrides): Promise<bigint> {
    return await this.view.getValidTimePeriod(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async governanceDataSource(
    overrides?: Overrides,
  ): Promise<PythInternalStructs.DataSourceStructOutput> {
    return await this.view.governanceDataSource(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async governanceDataSourceIndex(overrides?: Overrides): Promise<bigint> {
    return await this.view.governanceDataSourceIndex(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async hashDataSource(
    ds: PythInternalStructs.DataSourceStruct,
    overrides?: Overrides,
  ): Promise<string> {
    return await this.view.hashDataSource(
      ds,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isValidDataSource(
    dataSourceChainId: BigNumberish,
    dataSourceEmitterAddress: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.isValidDataSource(
      dataSourceChainId,
      dataSourceEmitterAddress,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isValidGovernanceDataSource(
    governanceChainId: BigNumberish,
    governanceEmitterAddress: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.isValidGovernanceDataSource(
      governanceChainId,
      governanceEmitterAddress,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async lastExecutedGovernanceSequence(overrides?: Overrides): Promise<bigint> {
    return await this.view.lastExecutedGovernanceSequence(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async latestPriceInfoPublishTime(
    priceId: BytesLike,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.latestPriceInfoPublishTime(
      priceId,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async owner(overrides?: Overrides): Promise<string> {
    return await this.view.owner(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async parseAuthorizeGovernanceDataSourceTransferPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
  ): Promise<PythGovernanceInstructions.AuthorizeGovernanceDataSourceTransferPayloadStructOutput> {
    return await this.view.parseAuthorizeGovernanceDataSourceTransferPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async parseGovernanceInstruction(
    encodedInstruction: BytesLike,
    overrides?: Overrides,
  ): Promise<PythGovernanceInstructions.GovernanceInstructionStructOutput> {
    return await this.view.parseGovernanceInstruction(
      encodedInstruction,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async parseRequestGovernanceDataSourceTransferPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
  ): Promise<PythGovernanceInstructions.RequestGovernanceDataSourceTransferPayloadStructOutput> {
    return await this.view.parseRequestGovernanceDataSourceTransferPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async parseSetDataSourcesPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
  ): Promise<PythGovernanceInstructions.SetDataSourcesPayloadStructOutput> {
    return await this.view.parseSetDataSourcesPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async parseSetFeePayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
  ): Promise<PythGovernanceInstructions.SetFeePayloadStructOutput> {
    return await this.view.parseSetFeePayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async parseSetValidPeriodPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
  ): Promise<PythGovernanceInstructions.SetValidPeriodPayloadStructOutput> {
    return await this.view.parseSetValidPeriodPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async parseUpgradeContractPayload(
    encodedPayload: BytesLike,
    overrides?: Overrides,
  ): Promise<PythGovernanceInstructions.UpgradeContractPayloadStructOutput> {
    return await this.view.parseUpgradeContractPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async priceFeedExists(
    id: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.priceFeedExists(
      id,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async proxiableUUID(overrides?: Overrides): Promise<string> {
    return await this.view.proxiableUUID(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async pythUpgradableMagic(overrides?: Overrides): Promise<bigint> {
    return await this.view.pythUpgradableMagic(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async queryPriceFeed(
    id: BytesLike,
    overrides?: Overrides,
  ): Promise<PythStructs.PriceFeedStructOutput> {
    return await this.view.queryPriceFeed(
      id,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async singleUpdateFeeInWei(overrides?: Overrides): Promise<bigint> {
    return await this.view.singleUpdateFeeInWei(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async validDataSources(
    overrides?: Overrides,
  ): Promise<PythInternalStructs.DataSourceStructOutput[]> {
    return await this.view.validDataSources(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async validTimePeriodSeconds(overrides?: Overrides): Promise<bigint> {
    return await this.view.validTimePeriodSeconds(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async version(overrides?: Overrides): Promise<string> {
    return await this.view.version(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async wormhole(overrides?: Overrides): Promise<string> {
    return await this.view.wormhole(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  callStatic = {
    view: this.view,
    context: this.context,

    async executeGovernanceInstruction(
      encodedVM: BytesLike,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.executeGovernanceInstruction(
        encodedVM,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async initialize(
      wormhole: string,
      dataSourceEmitterChainIds: BigNumberish[],
      dataSourceEmitterAddresses: BytesLike[],
      governanceEmitterChainId: BigNumberish,
      governanceEmitterAddress: BytesLike,
      governanceInitialSequence: BigNumberish,
      validTimePeriodSeconds: BigNumberish,
      singleUpdateFeeInWei: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.initialize(
        wormhole,
        dataSourceEmitterChainIds,
        dataSourceEmitterAddresses,
        governanceEmitterChainId,
        governanceEmitterAddress,
        governanceInitialSequence,
        validTimePeriodSeconds,
        singleUpdateFeeInWei,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async parsePriceFeedUpdates(
      updateData: BytesLike[],
      priceIds: BytesLike[],
      minPublishTime: BigNumberish,
      maxPublishTime: BigNumberish,
      overrides?: Overrides,
    ): Promise<PythStructs.PriceFeedStructOutput[]> {
      return await this.view.callStatic.parsePriceFeedUpdates(
        updateData,
        priceIds,
        minPublishTime,
        maxPublishTime,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async renounceOwnership(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.renounceOwnership(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.transferOwnership(
        newOwner,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async updatePriceFeeds(
      updateData: BytesLike[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.updatePriceFeeds(
        updateData,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async updatePriceFeedsIfNecessary(
      updateData: BytesLike[],
      priceIds: BytesLike[],
      publishTimes: BigNumberish[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.updatePriceFeedsIfNecessary(
        updateData,
        priceIds,
        publishTimes,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async upgradeTo(
      newImplementation: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.upgradeTo(
        newImplementation,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.upgradeToAndCall(
        newImplementation,
        data,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
  };

  encodeCall = {
    view: this.view,
    context: this.context,

    chainId(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.chainId({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    executeGovernanceInstruction(
      encodedVM: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.executeGovernanceInstruction(encodedVM, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getEmaPrice(id: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getEmaPrice(id, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getEmaPriceNoOlderThan(
      id: BytesLike,
      age: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.getEmaPriceNoOlderThan(id, age, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getEmaPriceUnsafe(id: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getEmaPriceUnsafe(id, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getPrice(id: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getPrice(id, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getPriceNoOlderThan(
      id: BytesLike,
      age: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.getPriceNoOlderThan(id, age, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getPriceUnsafe(id: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getPriceUnsafe(id, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getUpdateFee_bytes_array(
      updateData: BytesLike[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.getUpdateFee_bytes_array(updateData, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getUpdateFee_uint256(
      updateDataSize: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.getUpdateFee_uint256(updateDataSize, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getValidTimePeriod(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getValidTimePeriod({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    governanceDataSource(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.governanceDataSource({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    governanceDataSourceIndex(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.governanceDataSourceIndex({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    hashDataSource(
      ds: PythInternalStructs.DataSourceStruct,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.hashDataSource(ds, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    initialize(
      wormhole: string,
      dataSourceEmitterChainIds: BigNumberish[],
      dataSourceEmitterAddresses: BytesLike[],
      governanceEmitterChainId: BigNumberish,
      governanceEmitterAddress: BytesLike,
      governanceInitialSequence: BigNumberish,
      validTimePeriodSeconds: BigNumberish,
      singleUpdateFeeInWei: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.initialize(
        wormhole,
        dataSourceEmitterChainIds,
        dataSourceEmitterAddresses,
        governanceEmitterChainId,
        governanceEmitterAddress,
        governanceInitialSequence,
        validTimePeriodSeconds,
        singleUpdateFeeInWei,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    isValidDataSource(
      dataSourceChainId: BigNumberish,
      dataSourceEmitterAddress: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.isValidDataSource(
        dataSourceChainId,
        dataSourceEmitterAddress,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    isValidGovernanceDataSource(
      governanceChainId: BigNumberish,
      governanceEmitterAddress: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.isValidGovernanceDataSource(
        governanceChainId,
        governanceEmitterAddress,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    lastExecutedGovernanceSequence(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.lastExecutedGovernanceSequence({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    latestPriceInfoPublishTime(
      priceId: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.latestPriceInfoPublishTime(priceId, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    owner(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.owner({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    parseAuthorizeGovernanceDataSourceTransferPayload(
      encodedPayload: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.parseAuthorizeGovernanceDataSourceTransferPayload(
        encodedPayload,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    parseGovernanceInstruction(
      encodedInstruction: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.parseGovernanceInstruction(
        encodedInstruction,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    parsePriceFeedUpdates(
      updateData: BytesLike[],
      priceIds: BytesLike[],
      minPublishTime: BigNumberish,
      maxPublishTime: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.parsePriceFeedUpdates(
        updateData,
        priceIds,
        minPublishTime,
        maxPublishTime,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    parseRequestGovernanceDataSourceTransferPayload(
      encodedPayload: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.parseRequestGovernanceDataSourceTransferPayload(
        encodedPayload,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    parseSetDataSourcesPayload(
      encodedPayload: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.parseSetDataSourcesPayload(encodedPayload, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    parseSetFeePayload(
      encodedPayload: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.parseSetFeePayload(encodedPayload, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    parseSetValidPeriodPayload(
      encodedPayload: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.parseSetValidPeriodPayload(encodedPayload, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    parseUpgradeContractPayload(
      encodedPayload: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.parseUpgradeContractPayload(encodedPayload, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    priceFeedExists(id: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.priceFeedExists(id, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    proxiableUUID(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.proxiableUUID({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    pythUpgradableMagic(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.pythUpgradableMagic({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    queryPriceFeed(id: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.queryPriceFeed(id, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    renounceOwnership(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.renounceOwnership({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    singleUpdateFeeInWei(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.singleUpdateFeeInWei({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transferOwnership(newOwner: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.transferOwnership(newOwner, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    updatePriceFeeds(
      updateData: BytesLike[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.updatePriceFeeds(updateData, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    updatePriceFeedsIfNecessary(
      updateData: BytesLike[],
      priceIds: BytesLike[],
      publishTimes: BigNumberish[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.updatePriceFeedsIfNecessary(
        updateData,
        priceIds,
        publishTimes,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    upgradeTo(newImplementation: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.upgradeTo(newImplementation, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.upgradeToAndCall(newImplementation, data, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    validDataSources(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.validDataSources({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    validTimePeriodSeconds(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.validTimePeriodSeconds({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    version(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.version({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    wormhole(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.wormhole({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
  };
}

export type PythContext = ContractContext<Pyth, PythBoundContractView>;

export class PythProcessor extends BaseProcessor<Pyth, PythBoundContractView> {
  onEventAdminChanged(
    handler: (event: AdminChangedEvent, ctx: PythContext) => void,
    filter?: AdminChangedEventFilter | AdminChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: AdminChangedEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["AdminChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBatchPriceFeedUpdate(
    handler: (event: BatchPriceFeedUpdateEvent, ctx: PythContext) => void,
    filter?:
      | BatchPriceFeedUpdateEventFilter
      | BatchPriceFeedUpdateEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BatchPriceFeedUpdateEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BatchPriceFeedUpdate(uint16,uint64)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBeaconUpgraded(
    handler: (event: BeaconUpgradedEvent, ctx: PythContext) => void,
    filter?: BeaconUpgradedEventFilter | BeaconUpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BeaconUpgradedEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BeaconUpgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventContractUpgraded(
    handler: (event: ContractUpgradedEvent, ctx: PythContext) => void,
    filter?: ContractUpgradedEventFilter | ContractUpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ContractUpgradedEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["ContractUpgraded(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventDataSourcesSet(
    handler: (event: DataSourcesSetEvent, ctx: PythContext) => void,
    filter?: DataSourcesSetEventFilter | DataSourcesSetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: DataSourcesSetEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "DataSourcesSet((uint16,bytes32)[],(uint16,bytes32)[])"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventFeeSet(
    handler: (event: FeeSetEvent, ctx: PythContext) => void,
    filter?: FeeSetEventFilter | FeeSetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: FeeSetEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["FeeSet(uint256,uint256)"](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventGovernanceDataSourceSet(
    handler: (event: GovernanceDataSourceSetEvent, ctx: PythContext) => void,
    filter?:
      | GovernanceDataSourceSetEventFilter
      | GovernanceDataSourceSetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: GovernanceDataSourceSetEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "GovernanceDataSourceSet((uint16,bytes32),(uint16,bytes32),uint64)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOwnershipTransferred(
    handler: (event: OwnershipTransferredEvent, ctx: PythContext) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OwnershipTransferredEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventPriceFeedUpdate(
    handler: (event: PriceFeedUpdateEvent, ctx: PythContext) => void,
    filter?: PriceFeedUpdateEventFilter | PriceFeedUpdateEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: PriceFeedUpdateEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "PriceFeedUpdate(bytes32,uint64,int64,uint64)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventUpgraded(
    handler: (event: UpgradedEvent, ctx: PythContext) => void,
    filter?: UpgradedEventFilter | UpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: UpgradedEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Upgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventValidPeriodSet(
    handler: (event: ValidPeriodSetEvent, ctx: PythContext) => void,
    filter?: ValidPeriodSetEventFilter | ValidPeriodSetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ValidPeriodSetEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["ValidPeriodSet(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onCallChainId(
    handler: (call: ChainIdCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChainIdCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9a8a0592",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallExecuteGovernanceInstruction(
    handler: (
      call: ExecuteGovernanceInstructionCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ExecuteGovernanceInstructionCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xb6ed701e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetEmaPrice(
    handler: (call: GetEmaPriceCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetEmaPriceCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xb5dcc911",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetEmaPriceNoOlderThan(
    handler: (call: GetEmaPriceNoOlderThanCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetEmaPriceNoOlderThanCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x711a2e28",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetEmaPriceUnsafe(
    handler: (call: GetEmaPriceUnsafeCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetEmaPriceUnsafeCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9474f45b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetPrice(
    handler: (call: GetPriceCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetPriceCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x31d98b3f",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetPriceNoOlderThan(
    handler: (call: GetPriceNoOlderThanCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetPriceNoOlderThanCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa4ae35e0",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetPriceUnsafe(
    handler: (call: GetPriceUnsafeCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetPriceUnsafeCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x96834ad3",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetUpdateFee_bytes_array(
    handler: (
      call: GetUpdateFee_bytes_arrayCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetUpdateFee_bytes_arrayCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xd47eed45",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetUpdateFee_uint256(
    handler: (call: GetUpdateFee_uint256CallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetUpdateFee_uint256CallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe17efd48",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetValidTimePeriod(
    handler: (call: GetValidTimePeriodCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetValidTimePeriodCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe18910a3",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGovernanceDataSource(
    handler: (call: GovernanceDataSourceCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GovernanceDataSourceCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x426234e4",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGovernanceDataSourceIndex(
    handler: (
      call: GovernanceDataSourceIndexCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GovernanceDataSourceIndexCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x6c72f51b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallHashDataSource(
    handler: (call: HashDataSourceCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: HashDataSourceCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x89a5bb4d",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallInitialize(
    handler: (call: InitializeCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: InitializeCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x146faf77",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsValidDataSource(
    handler: (call: IsValidDataSourceCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsValidDataSourceCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x437209a7",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsValidGovernanceDataSource(
    handler: (
      call: IsValidGovernanceDataSourceCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsValidGovernanceDataSourceCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x58c67635",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallLastExecutedGovernanceSequence(
    handler: (
      call: LastExecutedGovernanceSequenceCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: LastExecutedGovernanceSequenceCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x586d3cf8",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallLatestPriceInfoPublishTime(
    handler: (
      call: LatestPriceInfoPublishTimeCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: LatestPriceInfoPublishTimeCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4c469d8c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallOwner(
    handler: (call: OwnerCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: OwnerCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x8da5cb5b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallParseAuthorizeGovernanceDataSourceTransferPayload(
    handler: (
      call: ParseAuthorizeGovernanceDataSourceTransferPayloadCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ParseAuthorizeGovernanceDataSourceTransferPayloadCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xd82d58a5",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallParseGovernanceInstruction(
    handler: (
      call: ParseGovernanceInstructionCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ParseGovernanceInstructionCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x6b7f53ca",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallParsePriceFeedUpdates(
    handler: (call: ParsePriceFeedUpdatesCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ParsePriceFeedUpdatesCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4716e9c5",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallParseRequestGovernanceDataSourceTransferPayload(
    handler: (
      call: ParseRequestGovernanceDataSourceTransferPayloadCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ParseRequestGovernanceDataSourceTransferPayloadCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x7b72bcae",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallParseSetDataSourcesPayload(
    handler: (
      call: ParseSetDataSourcesPayloadCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ParseSetDataSourcesPayloadCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x87c5bd1b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallParseSetFeePayload(
    handler: (call: ParseSetFeePayloadCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ParseSetFeePayloadCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4d7a734e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallParseSetValidPeriodPayload(
    handler: (
      call: ParseSetValidPeriodPayloadCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ParseSetValidPeriodPayloadCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x14dd317f",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallParseUpgradeContractPayload(
    handler: (
      call: ParseUpgradeContractPayloadCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ParseUpgradeContractPayloadCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x8881016f",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPriceFeedExists(
    handler: (call: PriceFeedExistsCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PriceFeedExistsCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xb5ec0261",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallProxiableUUID(
    handler: (call: ProxiableUUIDCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ProxiableUUIDCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x52d1902d",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPythUpgradableMagic(
    handler: (call: PythUpgradableMagicCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PythUpgradableMagicCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe3795cc1",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallQueryPriceFeed(
    handler: (call: QueryPriceFeedCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: QueryPriceFeedCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xcaaf43f1",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRenounceOwnership(
    handler: (call: RenounceOwnershipCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RenounceOwnershipCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x715018a6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSingleUpdateFeeInWei(
    handler: (call: SingleUpdateFeeInWeiCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SingleUpdateFeeInWeiCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x48b6404d",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransferOwnership(
    handler: (call: TransferOwnershipCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TransferOwnershipCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf2fde38b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUpdatePriceFeeds(
    handler: (call: UpdatePriceFeedsCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UpdatePriceFeedsCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xef9e5e28",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUpdatePriceFeedsIfNecessary(
    handler: (
      call: UpdatePriceFeedsIfNecessaryCallTrace,
      ctx: PythContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UpdatePriceFeedsIfNecessaryCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xb9256d28",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUpgradeTo(
    handler: (call: UpgradeToCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UpgradeToCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3659cfe6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUpgradeToAndCall(
    handler: (call: UpgradeToAndCallCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UpgradeToAndCallCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4f1ef286",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallValidDataSources(
    handler: (call: ValidDataSourcesCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ValidDataSourcesCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa38d81c6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallValidTimePeriodSeconds(
    handler: (call: ValidTimePeriodSecondsCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ValidTimePeriodSecondsCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xcb718a9b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallVersion(
    handler: (call: VersionCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: VersionCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x54fd4d50",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallWormhole(
    handler: (call: WormholeCallTrace, ctx: PythContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: WormholeCallTrace,
      ctx: PythContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x84acd1bb",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  public static filters = {
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter {
      return templateContract.filters["AdminChanged(address,address)"](
        previousAdmin,
        newAdmin,
      );
    },
    BatchPriceFeedUpdate(
      chainId?: null,
      sequenceNumber?: null,
    ): BatchPriceFeedUpdateEventFilter {
      return templateContract.filters["BatchPriceFeedUpdate(uint16,uint64)"](
        chainId,
        sequenceNumber,
      );
    },
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter {
      return templateContract.filters["BeaconUpgraded(address)"](beacon);
    },
    ContractUpgraded(
      oldImplementation?: null,
      newImplementation?: null,
    ): ContractUpgradedEventFilter {
      return templateContract.filters["ContractUpgraded(address,address)"](
        oldImplementation,
        newImplementation,
      );
    },
    DataSourcesSet(
      oldDataSources?: null,
      newDataSources?: null,
    ): DataSourcesSetEventFilter {
      return templateContract.filters[
        "DataSourcesSet((uint16,bytes32)[],(uint16,bytes32)[])"
      ](oldDataSources, newDataSources);
    },
    FeeSet(oldFee?: null, newFee?: null): FeeSetEventFilter {
      return templateContract.filters["FeeSet(uint256,uint256)"](
        oldFee,
        newFee,
      );
    },
    GovernanceDataSourceSet(
      oldDataSource?: null,
      newDataSource?: null,
      initialSequence?: null,
    ): GovernanceDataSourceSetEventFilter {
      return templateContract.filters[
        "GovernanceDataSourceSet((uint16,bytes32),(uint16,bytes32),uint64)"
      ](oldDataSource, newDataSource, initialSequence);
    },
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter {
      return templateContract.filters["OwnershipTransferred(address,address)"](
        previousOwner,
        newOwner,
      );
    },
    PriceFeedUpdate(
      id?: BytesLike | null,
      publishTime?: null,
      price?: null,
      conf?: null,
    ): PriceFeedUpdateEventFilter {
      return templateContract.filters[
        "PriceFeedUpdate(bytes32,uint64,int64,uint64)"
      ](id, publishTime, price, conf);
    },
    Upgraded(implementation?: string | null): UpgradedEventFilter {
      return templateContract.filters["Upgraded(address)"](implementation);
    },
    ValidPeriodSet(
      oldValidPeriod?: null,
      newValidPeriod?: null,
    ): ValidPeriodSetEventFilter {
      return templateContract.filters["ValidPeriodSet(uint256,uint256)"](
        oldValidPeriod,
        newValidPeriod,
      );
    },
  };

  protected CreateBoundContractView(): PythBoundContractView {
    const view = getPythContract(this.config.network, this.config.address);
    return new PythBoundContractView(this.config.address, view);
  }

  public static bind(options: BindOptions): PythProcessor {
    if (!options.name) {
      options.name = "Pyth";
    }
    let processor = getProcessor(options) as PythProcessor;
    if (!processor) {
      processor = new PythProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }
}

export class PythProcessorTemplate extends BaseProcessorTemplate<
  Pyth,
  PythBoundContractView
> {
  bindInternal(options: BindOptions) {
    if (!options.name) {
      options.name = "Pyth";
    }
    let processor = getProcessor(options) as PythProcessor;
    if (!processor) {
      processor = new PythProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }

  onEventAdminChanged(
    handler: (event: AdminChangedEvent, ctx: PythContext) => void,
    filter?: AdminChangedEventFilter | AdminChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: AdminChangedEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["AdminChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBatchPriceFeedUpdate(
    handler: (event: BatchPriceFeedUpdateEvent, ctx: PythContext) => void,
    filter?:
      | BatchPriceFeedUpdateEventFilter
      | BatchPriceFeedUpdateEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BatchPriceFeedUpdateEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BatchPriceFeedUpdate(uint16,uint64)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBeaconUpgraded(
    handler: (event: BeaconUpgradedEvent, ctx: PythContext) => void,
    filter?: BeaconUpgradedEventFilter | BeaconUpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BeaconUpgradedEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BeaconUpgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventContractUpgraded(
    handler: (event: ContractUpgradedEvent, ctx: PythContext) => void,
    filter?: ContractUpgradedEventFilter | ContractUpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ContractUpgradedEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["ContractUpgraded(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventDataSourcesSet(
    handler: (event: DataSourcesSetEvent, ctx: PythContext) => void,
    filter?: DataSourcesSetEventFilter | DataSourcesSetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: DataSourcesSetEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "DataSourcesSet((uint16,bytes32)[],(uint16,bytes32)[])"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventFeeSet(
    handler: (event: FeeSetEvent, ctx: PythContext) => void,
    filter?: FeeSetEventFilter | FeeSetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: FeeSetEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["FeeSet(uint256,uint256)"](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventGovernanceDataSourceSet(
    handler: (event: GovernanceDataSourceSetEvent, ctx: PythContext) => void,
    filter?:
      | GovernanceDataSourceSetEventFilter
      | GovernanceDataSourceSetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: GovernanceDataSourceSetEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "GovernanceDataSourceSet((uint16,bytes32),(uint16,bytes32),uint64)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOwnershipTransferred(
    handler: (event: OwnershipTransferredEvent, ctx: PythContext) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OwnershipTransferredEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventPriceFeedUpdate(
    handler: (event: PriceFeedUpdateEvent, ctx: PythContext) => void,
    filter?: PriceFeedUpdateEventFilter | PriceFeedUpdateEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: PriceFeedUpdateEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "PriceFeedUpdate(bytes32,uint64,int64,uint64)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventUpgraded(
    handler: (event: UpgradedEvent, ctx: PythContext) => void,
    filter?: UpgradedEventFilter | UpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: UpgradedEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Upgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventValidPeriodSet(
    handler: (event: ValidPeriodSetEvent, ctx: PythContext) => void,
    filter?: ValidPeriodSetEventFilter | ValidPeriodSetEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: ValidPeriodSetEvent,
      ctx: PythContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["ValidPeriodSet(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }
}

export function getPythContract(
  chainId: EthChainId,
  address: string,
): PythContractView {
  let contract = getContractByABI("Pyth", address, chainId) as PythContractView;
  if (!contract) {
    const rawContract = Pyth__factory.connect(
      address,
      getProvider(chainId as any),
    );
    contract = new PythContractView(rawContract);
    addContractByABI("Pyth", address, chainId, contract);
  }
  return contract;
}

export function getPythContractOnContext(
  context: EthContext,
  address: string,
): PythBoundContractView {
  const view = getPythContract(context.getChainId(), address);
  const boundView = new PythBoundContractView(address, view);
  boundView.context = context;
  if (boundView.callStatic) {
    boundView.callStatic.context = context;
  }
  return boundView;
}
