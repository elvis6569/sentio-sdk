/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish, Overrides } from "ethers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  BoundContractView,
  ContractContext,
  ContractView,
  DummyProvider,
  EthChainId,
  TypedCallTrace,
  EthContext,
  EthFetchConfig,
  PreprocessResult,
  encodeCallData,
} from "@sentio/sdk/eth";
import { EthCallParam, EthCallContext, PreparedData } from "@sentio/protos";

import { TokenExchange__factory } from "./index.js";
import {
  TokenExchange,
  TokenExchangeEvent,
  TokenExchangeEventFilter,
  AddLiquidityEvent,
  AddLiquidityEventFilter,
  RemoveLiquidityEvent,
  RemoveLiquidityEventFilter,
  RemoveLiquidityOneEvent,
  RemoveLiquidityOneEventFilter,
  RemoveLiquidityImbalanceEvent,
  RemoveLiquidityImbalanceEventFilter,
  CommitNewAdminEvent,
  CommitNewAdminEventFilter,
  NewAdminEvent,
  NewAdminEventFilter,
  CommitNewFeeEvent,
  CommitNewFeeEventFilter,
  NewFeeEvent,
  NewFeeEventFilter,
  RampAEvent,
  RampAEventFilter,
  StopRampAEvent,
  StopRampAEventFilter,
} from "./TokenExchange.js";

export interface ACallObject {}

export type ACallTrace = TypedCallTrace<[], ACallObject>;

export interface Get_virtual_priceCallObject {}

export type Get_virtual_priceCallTrace = TypedCallTrace<
  [],
  Get_virtual_priceCallObject
>;

export interface Calc_token_amountCallObject {
  amounts: [bigint, bigint, bigint];
  deposit: boolean;
}

export type Calc_token_amountCallTrace = TypedCallTrace<
  [[bigint, bigint, bigint], boolean],
  Calc_token_amountCallObject
>;

export interface Add_liquidityCallObject {
  amounts: [bigint, bigint, bigint];
  min_mint_amount: bigint;
}

export type Add_liquidityCallTrace = TypedCallTrace<
  [[bigint, bigint, bigint], bigint],
  Add_liquidityCallObject
>;

export interface Get_dyCallObject {
  i: bigint;
  j: bigint;
  dx: bigint;
}

export type Get_dyCallTrace = TypedCallTrace<
  [bigint, bigint, bigint],
  Get_dyCallObject
>;

export interface Get_dy_underlyingCallObject {
  i: bigint;
  j: bigint;
  dx: bigint;
}

export type Get_dy_underlyingCallTrace = TypedCallTrace<
  [bigint, bigint, bigint],
  Get_dy_underlyingCallObject
>;

export interface ExchangeCallObject {
  i: bigint;
  j: bigint;
  dx: bigint;
  min_dy: bigint;
}

export type ExchangeCallTrace = TypedCallTrace<
  [bigint, bigint, bigint, bigint],
  ExchangeCallObject
>;

export interface Remove_liquidityCallObject {
  _amount: bigint;
  min_amounts: [bigint, bigint, bigint];
}

export type Remove_liquidityCallTrace = TypedCallTrace<
  [bigint, [bigint, bigint, bigint]],
  Remove_liquidityCallObject
>;

export interface Remove_liquidity_imbalanceCallObject {
  amounts: [bigint, bigint, bigint];
  max_burn_amount: bigint;
}

export type Remove_liquidity_imbalanceCallTrace = TypedCallTrace<
  [[bigint, bigint, bigint], bigint],
  Remove_liquidity_imbalanceCallObject
>;

export interface Calc_withdraw_one_coinCallObject {
  _token_amount: bigint;
  i: bigint;
}

export type Calc_withdraw_one_coinCallTrace = TypedCallTrace<
  [bigint, bigint],
  Calc_withdraw_one_coinCallObject
>;

export interface Remove_liquidity_one_coinCallObject {
  _token_amount: bigint;
  i: bigint;
  min_amount: bigint;
}

export type Remove_liquidity_one_coinCallTrace = TypedCallTrace<
  [bigint, bigint, bigint],
  Remove_liquidity_one_coinCallObject
>;

export interface Ramp_ACallObject {
  _future_A: bigint;
  _future_time: bigint;
}

export type Ramp_ACallTrace = TypedCallTrace<
  [bigint, bigint],
  Ramp_ACallObject
>;

export interface Stop_ramp_ACallObject {}

export type Stop_ramp_ACallTrace = TypedCallTrace<[], Stop_ramp_ACallObject>;

export interface Commit_new_feeCallObject {
  new_fee: bigint;
  new_admin_fee: bigint;
}

export type Commit_new_feeCallTrace = TypedCallTrace<
  [bigint, bigint],
  Commit_new_feeCallObject
>;

export interface Apply_new_feeCallObject {}

export type Apply_new_feeCallTrace = TypedCallTrace<
  [],
  Apply_new_feeCallObject
>;

export interface Revert_new_parametersCallObject {}

export type Revert_new_parametersCallTrace = TypedCallTrace<
  [],
  Revert_new_parametersCallObject
>;

export interface Commit_transfer_ownershipCallObject {
  _owner: string;
}

export type Commit_transfer_ownershipCallTrace = TypedCallTrace<
  [string],
  Commit_transfer_ownershipCallObject
>;

export interface Apply_transfer_ownershipCallObject {}

export type Apply_transfer_ownershipCallTrace = TypedCallTrace<
  [],
  Apply_transfer_ownershipCallObject
>;

export interface Revert_transfer_ownershipCallObject {}

export type Revert_transfer_ownershipCallTrace = TypedCallTrace<
  [],
  Revert_transfer_ownershipCallObject
>;

export interface Admin_balancesCallObject {
  i: bigint;
}

export type Admin_balancesCallTrace = TypedCallTrace<
  [bigint],
  Admin_balancesCallObject
>;

export interface Withdraw_admin_feesCallObject {}

export type Withdraw_admin_feesCallTrace = TypedCallTrace<
  [],
  Withdraw_admin_feesCallObject
>;

export interface Donate_admin_feesCallObject {}

export type Donate_admin_feesCallTrace = TypedCallTrace<
  [],
  Donate_admin_feesCallObject
>;

export interface Kill_meCallObject {}

export type Kill_meCallTrace = TypedCallTrace<[], Kill_meCallObject>;

export interface Unkill_meCallObject {}

export type Unkill_meCallTrace = TypedCallTrace<[], Unkill_meCallObject>;

export interface CoinsCallObject {
  arg0: bigint;
}

export type CoinsCallTrace = TypedCallTrace<[bigint], CoinsCallObject>;

export interface BalancesCallObject {
  arg0: bigint;
}

export type BalancesCallTrace = TypedCallTrace<[bigint], BalancesCallObject>;

export interface FeeCallObject {}

export type FeeCallTrace = TypedCallTrace<[], FeeCallObject>;

export interface Admin_feeCallObject {}

export type Admin_feeCallTrace = TypedCallTrace<[], Admin_feeCallObject>;

export interface OwnerCallObject {}

export type OwnerCallTrace = TypedCallTrace<[], OwnerCallObject>;

export interface Initial_ACallObject {}

export type Initial_ACallTrace = TypedCallTrace<[], Initial_ACallObject>;

export interface Future_ACallObject {}

export type Future_ACallTrace = TypedCallTrace<[], Future_ACallObject>;

export interface Initial_A_timeCallObject {}

export type Initial_A_timeCallTrace = TypedCallTrace<
  [],
  Initial_A_timeCallObject
>;

export interface Future_A_timeCallObject {}

export type Future_A_timeCallTrace = TypedCallTrace<
  [],
  Future_A_timeCallObject
>;

export interface Admin_actions_deadlineCallObject {}

export type Admin_actions_deadlineCallTrace = TypedCallTrace<
  [],
  Admin_actions_deadlineCallObject
>;

export interface Transfer_ownership_deadlineCallObject {}

export type Transfer_ownership_deadlineCallTrace = TypedCallTrace<
  [],
  Transfer_ownership_deadlineCallObject
>;

export interface Future_feeCallObject {}

export type Future_feeCallTrace = TypedCallTrace<[], Future_feeCallObject>;

export interface Future_admin_feeCallObject {}

export type Future_admin_feeCallTrace = TypedCallTrace<
  [],
  Future_admin_feeCallObject
>;

export interface Future_ownerCallObject {}

export type Future_ownerCallTrace = TypedCallTrace<[], Future_ownerCallObject>;

const templateContract = TokenExchange__factory.connect("0x0", DummyProvider);

export class TokenExchangeContractView extends ContractView<TokenExchange> {
  constructor(contract: TokenExchange) {
    super(contract);
    this.callStatic.contract = contract;
  }

  async A(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("A()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async get_virtual_price(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("get_virtual_price()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async calc_token_amount(
    amounts: [BigNumberish, BigNumberish, BigNumberish],
    deposit: boolean,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction(
        "calc_token_amount(uint256[3],bool)",
      )(amounts, deposit, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async get_dy(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("get_dy(int128,int128,uint256)")(
        i,
        j,
        dx,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async get_dy_underlying(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction(
        "get_dy_underlying(int128,int128,uint256)",
      )(i, j, dx, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async calc_withdraw_one_coin(
    _token_amount: BigNumberish,
    i: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction(
        "calc_withdraw_one_coin(uint256,int128)",
      )(_token_amount, i, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async admin_balances(
    i: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("admin_balances(uint256)")(
        i,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async coins(
    arg0: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("coins(uint256)")(
        arg0,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async balances(
    arg0: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("balances(uint256)")(
        arg0,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async fee(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("fee()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async admin_fee(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("admin_fee()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async owner(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("owner()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async initial_A(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("initial_A()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async future_A(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("future_A()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async initial_A_time(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("initial_A_time()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async future_A_time(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("future_A_time()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async admin_actions_deadline(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("admin_actions_deadline()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async transfer_ownership_deadline(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("transfer_ownership_deadline()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async future_fee(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("future_fee()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async future_admin_fee(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("future_admin_fee()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async future_owner(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("future_owner()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  callStatic = {
    contract: this.contract,

    async add_liquidity(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("add_liquidity(uint256[3],uint256)")
          .staticCall(amounts, min_mint_amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("exchange(int128,int128,uint256,uint256)")
          .staticCall(i, j, dx, min_dy, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async remove_liquidity(
      _amount: BigNumberish,
      min_amounts: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("remove_liquidity(uint256,uint256[3])")
          .staticCall(_amount, min_amounts, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async remove_liquidity_imbalance(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      max_burn_amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("remove_liquidity_imbalance(uint256[3],uint256)")
          .staticCall(amounts, max_burn_amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("remove_liquidity_one_coin(uint256,int128,uint256)")
          .staticCall(_token_amount, i, min_amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("ramp_A(uint256,uint256)")
          .staticCall(_future_A, _future_time, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async stop_ramp_A(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("stop_ramp_A()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async commit_new_fee(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("commit_new_fee(uint256,uint256)")
          .staticCall(new_fee, new_admin_fee, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async apply_new_fee(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("apply_new_fee()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async revert_new_parameters(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("revert_new_parameters()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("commit_transfer_ownership(address)")
          .staticCall(_owner, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async apply_transfer_ownership(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("apply_transfer_ownership()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async revert_transfer_ownership(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("revert_transfer_ownership()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async withdraw_admin_fees(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("withdraw_admin_fees()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async donate_admin_fees(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("donate_admin_fees()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async kill_me(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("kill_me()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async unkill_me(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("unkill_me()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
  };

  encodeCall = {
    A(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "A", "function A()", []);
    },
    get_virtual_price(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "get_virtual_price",
        "function get_virtual_price()",
        [],
      );
    },
    calc_token_amount(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      deposit: boolean,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "calc_token_amount",
        "function calc_token_amount(uint256[3],bool)",
        [amounts, deposit],
      );
    },
    add_liquidity(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "add_liquidity",
        "function add_liquidity(uint256[3],uint256)",
        [amounts, min_mint_amount],
      );
    },
    get_dy(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "get_dy",
        "function get_dy(int128,int128,uint256)",
        [i, j, dx],
      );
    },
    get_dy_underlying(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "get_dy_underlying",
        "function get_dy_underlying(int128,int128,uint256)",
        [i, j, dx],
      );
    },
    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "exchange",
        "function exchange(int128,int128,uint256,uint256)",
        [i, j, dx, min_dy],
      );
    },
    remove_liquidity(
      _amount: BigNumberish,
      min_amounts: [BigNumberish, BigNumberish, BigNumberish],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "remove_liquidity",
        "function remove_liquidity(uint256,uint256[3])",
        [_amount, min_amounts],
      );
    },
    remove_liquidity_imbalance(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      max_burn_amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "remove_liquidity_imbalance",
        "function remove_liquidity_imbalance(uint256[3],uint256)",
        [amounts, max_burn_amount],
      );
    },
    calc_withdraw_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "calc_withdraw_one_coin",
        "function calc_withdraw_one_coin(uint256,int128)",
        [_token_amount, i],
      );
    },
    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "remove_liquidity_one_coin",
        "function remove_liquidity_one_coin(uint256,int128,uint256)",
        [_token_amount, i, min_amount],
      );
    },
    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "ramp_A",
        "function ramp_A(uint256,uint256)",
        [_future_A, _future_time],
      );
    },
    stop_ramp_A(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "stop_ramp_A",
        "function stop_ramp_A()",
        [],
      );
    },
    commit_new_fee(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "commit_new_fee",
        "function commit_new_fee(uint256,uint256)",
        [new_fee, new_admin_fee],
      );
    },
    apply_new_fee(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "apply_new_fee",
        "function apply_new_fee()",
        [],
      );
    },
    revert_new_parameters(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "revert_new_parameters",
        "function revert_new_parameters()",
        [],
      );
    },
    commit_transfer_ownership(
      _owner: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "commit_transfer_ownership",
        "function commit_transfer_ownership(address)",
        [_owner],
      );
    },
    apply_transfer_ownership(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "apply_transfer_ownership",
        "function apply_transfer_ownership()",
        [],
      );
    },
    revert_transfer_ownership(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "revert_transfer_ownership",
        "function revert_transfer_ownership()",
        [],
      );
    },
    admin_balances(i: BigNumberish, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "admin_balances",
        "function admin_balances(uint256)",
        [i],
      );
    },
    withdraw_admin_fees(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "withdraw_admin_fees",
        "function withdraw_admin_fees()",
        [],
      );
    },
    donate_admin_fees(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "donate_admin_fees",
        "function donate_admin_fees()",
        [],
      );
    },
    kill_me(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "kill_me", "function kill_me()", []);
    },
    unkill_me(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "unkill_me",
        "function unkill_me()",
        [],
      );
    },
    coins(arg0: BigNumberish, callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "coins", "function coins(uint256)", [
        arg0,
      ]);
    },
    balances(arg0: BigNumberish, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "balances",
        "function balances(uint256)",
        [arg0],
      );
    },
    fee(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "fee", "function fee()", []);
    },
    admin_fee(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "admin_fee",
        "function admin_fee()",
        [],
      );
    },
    owner(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "owner", "function owner()", []);
    },
    initial_A(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "initial_A",
        "function initial_A()",
        [],
      );
    },
    future_A(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "future_A", "function future_A()", []);
    },
    initial_A_time(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "initial_A_time",
        "function initial_A_time()",
        [],
      );
    },
    future_A_time(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "future_A_time",
        "function future_A_time()",
        [],
      );
    },
    admin_actions_deadline(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "admin_actions_deadline",
        "function admin_actions_deadline()",
        [],
      );
    },
    transfer_ownership_deadline(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "transfer_ownership_deadline",
        "function transfer_ownership_deadline()",
        [],
      );
    },
    future_fee(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "future_fee",
        "function future_fee()",
        [],
      );
    },
    future_admin_fee(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "future_admin_fee",
        "function future_admin_fee()",
        [],
      );
    },
    future_owner(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "future_owner",
        "function future_owner()",
        [],
      );
    },
  };
}

export class TokenExchangeBoundContractView extends BoundContractView<
  TokenExchange,
  TokenExchangeContractView
> {
  async A(overrides?: Overrides): Promise<bigint> {
    return await this.view.A(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async get_virtual_price(overrides?: Overrides): Promise<bigint> {
    return await this.view.get_virtual_price(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async calc_token_amount(
    amounts: [BigNumberish, BigNumberish, BigNumberish],
    deposit: boolean,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.calc_token_amount(
      amounts,
      deposit,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async get_dy(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.get_dy(
      i,
      j,
      dx,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async get_dy_underlying(
    i: BigNumberish,
    j: BigNumberish,
    dx: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.get_dy_underlying(
      i,
      j,
      dx,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async calc_withdraw_one_coin(
    _token_amount: BigNumberish,
    i: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.calc_withdraw_one_coin(
      _token_amount,
      i,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async admin_balances(
    i: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.admin_balances(
      i,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async coins(arg0: BigNumberish, overrides?: Overrides): Promise<string> {
    return await this.view.coins(
      arg0,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async balances(arg0: BigNumberish, overrides?: Overrides): Promise<bigint> {
    return await this.view.balances(
      arg0,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async fee(overrides?: Overrides): Promise<bigint> {
    return await this.view.fee(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async admin_fee(overrides?: Overrides): Promise<bigint> {
    return await this.view.admin_fee(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async owner(overrides?: Overrides): Promise<string> {
    return await this.view.owner(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async initial_A(overrides?: Overrides): Promise<bigint> {
    return await this.view.initial_A(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async future_A(overrides?: Overrides): Promise<bigint> {
    return await this.view.future_A(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async initial_A_time(overrides?: Overrides): Promise<bigint> {
    return await this.view.initial_A_time(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async future_A_time(overrides?: Overrides): Promise<bigint> {
    return await this.view.future_A_time(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async admin_actions_deadline(overrides?: Overrides): Promise<bigint> {
    return await this.view.admin_actions_deadline(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async transfer_ownership_deadline(overrides?: Overrides): Promise<bigint> {
    return await this.view.transfer_ownership_deadline(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async future_fee(overrides?: Overrides): Promise<bigint> {
    return await this.view.future_fee(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async future_admin_fee(overrides?: Overrides): Promise<bigint> {
    return await this.view.future_admin_fee(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async future_owner(overrides?: Overrides): Promise<string> {
    return await this.view.future_owner(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  callStatic = {
    view: this.view,
    context: this.context,

    async add_liquidity(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.add_liquidity(
        amounts,
        min_mint_amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.exchange(
        i,
        j,
        dx,
        min_dy,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async remove_liquidity(
      _amount: BigNumberish,
      min_amounts: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.remove_liquidity(
        _amount,
        min_amounts,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async remove_liquidity_imbalance(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      max_burn_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.remove_liquidity_imbalance(
        amounts,
        max_burn_amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.remove_liquidity_one_coin(
        _token_amount,
        i,
        min_amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.ramp_A(
        _future_A,
        _future_time,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async stop_ramp_A(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.stop_ramp_A(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async commit_new_fee(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.commit_new_fee(
        new_fee,
        new_admin_fee,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async apply_new_fee(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.apply_new_fee(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async revert_new_parameters(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.revert_new_parameters(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.commit_transfer_ownership(
        _owner,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async apply_transfer_ownership(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.apply_transfer_ownership(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async revert_transfer_ownership(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.revert_transfer_ownership(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async withdraw_admin_fees(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.withdraw_admin_fees(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async donate_admin_fees(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.donate_admin_fees(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async kill_me(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.kill_me(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async unkill_me(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.unkill_me(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
  };

  encodeCall = {
    view: this.view,
    context: this.context,

    A(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.A({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    get_virtual_price(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.get_virtual_price({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    calc_token_amount(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      deposit: boolean,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.calc_token_amount(amounts, deposit, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    add_liquidity(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      min_mint_amount: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.add_liquidity(amounts, min_mint_amount, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    get_dy(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.get_dy(i, j, dx, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    get_dy_underlying(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.get_dy_underlying(i, j, dx, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    exchange(
      i: BigNumberish,
      j: BigNumberish,
      dx: BigNumberish,
      min_dy: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.exchange(i, j, dx, min_dy, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    remove_liquidity(
      _amount: BigNumberish,
      min_amounts: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.remove_liquidity(_amount, min_amounts, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    remove_liquidity_imbalance(
      amounts: [BigNumberish, BigNumberish, BigNumberish],
      max_burn_amount: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.remove_liquidity_imbalance(
        amounts,
        max_burn_amount,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    calc_withdraw_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.calc_withdraw_one_coin(_token_amount, i, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    remove_liquidity_one_coin(
      _token_amount: BigNumberish,
      i: BigNumberish,
      min_amount: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.remove_liquidity_one_coin(
        _token_amount,
        i,
        min_amount,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    ramp_A(
      _future_A: BigNumberish,
      _future_time: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.ramp_A(_future_A, _future_time, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    stop_ramp_A(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.stop_ramp_A({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    commit_new_fee(
      new_fee: BigNumberish,
      new_admin_fee: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.commit_new_fee(new_fee, new_admin_fee, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    apply_new_fee(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.apply_new_fee({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    revert_new_parameters(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.revert_new_parameters({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.commit_transfer_ownership(_owner, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    apply_transfer_ownership(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.apply_transfer_ownership({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    revert_transfer_ownership(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.revert_transfer_ownership({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    admin_balances(i: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.admin_balances(i, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    withdraw_admin_fees(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.withdraw_admin_fees({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    donate_admin_fees(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.donate_admin_fees({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    kill_me(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.kill_me({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    unkill_me(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.unkill_me({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    coins(arg0: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.coins(arg0, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    balances(arg0: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.balances(arg0, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    fee(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.fee({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    admin_fee(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.admin_fee({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    owner(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.owner({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    initial_A(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.initial_A({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    future_A(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.future_A({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    initial_A_time(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.initial_A_time({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    future_A_time(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.future_A_time({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    admin_actions_deadline(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.admin_actions_deadline({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transfer_ownership_deadline(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.transfer_ownership_deadline({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    future_fee(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.future_fee({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    future_admin_fee(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.future_admin_fee({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    future_owner(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.future_owner({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
  };
}

export type TokenExchangeContext = ContractContext<
  TokenExchange,
  TokenExchangeBoundContractView
>;

export class TokenExchangeProcessor extends BaseProcessor<
  TokenExchange,
  TokenExchangeBoundContractView
> {
  onEventTokenExchange(
    handler: (event: TokenExchangeEvent, ctx: TokenExchangeContext) => void,
    filter?: TokenExchangeEventFilter | TokenExchangeEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: TokenExchangeEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "TokenExchange(address,int128,uint256,int128,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventAddLiquidity(
    handler: (event: AddLiquidityEvent, ctx: TokenExchangeContext) => void,
    filter?: AddLiquidityEventFilter | AddLiquidityEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: AddLiquidityEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "AddLiquidity(address,uint256[3],uint256[3],uint256,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRemoveLiquidity(
    handler: (event: RemoveLiquidityEvent, ctx: TokenExchangeContext) => void,
    filter?: RemoveLiquidityEventFilter | RemoveLiquidityEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RemoveLiquidityEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "RemoveLiquidity(address,uint256[3],uint256[3],uint256)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRemoveLiquidityOne(
    handler: (
      event: RemoveLiquidityOneEvent,
      ctx: TokenExchangeContext,
    ) => void,
    filter?: RemoveLiquidityOneEventFilter | RemoveLiquidityOneEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RemoveLiquidityOneEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "RemoveLiquidityOne(address,uint256,uint256)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRemoveLiquidityImbalance(
    handler: (
      event: RemoveLiquidityImbalanceEvent,
      ctx: TokenExchangeContext,
    ) => void,
    filter?:
      | RemoveLiquidityImbalanceEventFilter
      | RemoveLiquidityImbalanceEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RemoveLiquidityImbalanceEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "RemoveLiquidityImbalance(address,uint256[3],uint256[3],uint256,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventCommitNewAdmin(
    handler: (event: CommitNewAdminEvent, ctx: TokenExchangeContext) => void,
    filter?: CommitNewAdminEventFilter | CommitNewAdminEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitNewAdminEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["CommitNewAdmin(uint256,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventNewAdmin(
    handler: (event: NewAdminEvent, ctx: TokenExchangeContext) => void,
    filter?: NewAdminEventFilter | NewAdminEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: NewAdminEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["NewAdmin(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventCommitNewFee(
    handler: (event: CommitNewFeeEvent, ctx: TokenExchangeContext) => void,
    filter?: CommitNewFeeEventFilter | CommitNewFeeEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitNewFeeEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "CommitNewFee(uint256,uint256,uint256)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventNewFee(
    handler: (event: NewFeeEvent, ctx: TokenExchangeContext) => void,
    filter?: NewFeeEventFilter | NewFeeEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: NewFeeEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["NewFee(uint256,uint256)"](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRampA(
    handler: (event: RampAEvent, ctx: TokenExchangeContext) => void,
    filter?: RampAEventFilter | RampAEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RampAEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "RampA(uint256,uint256,uint256,uint256)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventStopRampA(
    handler: (event: StopRampAEvent, ctx: TokenExchangeContext) => void,
    filter?: StopRampAEventFilter | StopRampAEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: StopRampAEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["StopRampA(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onCallA(
    handler: (call: ACallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ACallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf446c1d0",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGet_virtual_price(
    handler: (
      call: Get_virtual_priceCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Get_virtual_priceCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xbb7b8b80",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCalc_token_amount(
    handler: (
      call: Calc_token_amountCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Calc_token_amountCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3883e119",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAdd_liquidity(
    handler: (call: Add_liquidityCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Add_liquidityCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4515cef3",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGet_dy(
    handler: (call: Get_dyCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Get_dyCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x5e0d443f",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGet_dy_underlying(
    handler: (
      call: Get_dy_underlyingCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Get_dy_underlyingCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x07211ef7",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallExchange(
    handler: (call: ExchangeCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ExchangeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3df02124",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRemove_liquidity(
    handler: (
      call: Remove_liquidityCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Remove_liquidityCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xecb586a5",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRemove_liquidity_imbalance(
    handler: (
      call: Remove_liquidity_imbalanceCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Remove_liquidity_imbalanceCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9fdaea0c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCalc_withdraw_one_coin(
    handler: (
      call: Calc_withdraw_one_coinCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Calc_withdraw_one_coinCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xcc2b27d7",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRemove_liquidity_one_coin(
    handler: (
      call: Remove_liquidity_one_coinCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Remove_liquidity_one_coinCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x1a4d01d2",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRamp_A(
    handler: (call: Ramp_ACallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Ramp_ACallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3c157e64",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallStop_ramp_A(
    handler: (call: Stop_ramp_ACallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Stop_ramp_ACallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x551a6588",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCommit_new_fee(
    handler: (call: Commit_new_feeCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Commit_new_feeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x5b5a1467",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallApply_new_fee(
    handler: (call: Apply_new_feeCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Apply_new_feeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4f12fe97",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRevert_new_parameters(
    handler: (
      call: Revert_new_parametersCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Revert_new_parametersCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x226840fb",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCommit_transfer_ownership(
    handler: (
      call: Commit_transfer_ownershipCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Commit_transfer_ownershipCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x6b441a40",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallApply_transfer_ownership(
    handler: (
      call: Apply_transfer_ownershipCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Apply_transfer_ownershipCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x6a1c05ae",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRevert_transfer_ownership(
    handler: (
      call: Revert_transfer_ownershipCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Revert_transfer_ownershipCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x86fbf193",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAdmin_balances(
    handler: (call: Admin_balancesCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Admin_balancesCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe2e7d264",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallWithdraw_admin_fees(
    handler: (
      call: Withdraw_admin_feesCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Withdraw_admin_feesCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x30c54085",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallDonate_admin_fees(
    handler: (
      call: Donate_admin_feesCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Donate_admin_feesCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x524c3901",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallKill_me(
    handler: (call: Kill_meCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Kill_meCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe3698853",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUnkill_me(
    handler: (call: Unkill_meCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Unkill_meCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3046f972",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCoins(
    handler: (call: CoinsCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: CoinsCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xc6610657",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallBalances(
    handler: (call: BalancesCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: BalancesCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4903b0d1",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallFee(
    handler: (call: FeeCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: FeeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xddca3f43",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAdmin_fee(
    handler: (call: Admin_feeCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Admin_feeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xfee3f7f9",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallOwner(
    handler: (call: OwnerCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: OwnerCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x8da5cb5b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallInitial_A(
    handler: (call: Initial_ACallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Initial_ACallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x5409491a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallFuture_A(
    handler: (call: Future_ACallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Future_ACallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xb4b577ad",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallInitial_A_time(
    handler: (call: Initial_A_timeCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Initial_A_timeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x2081066c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallFuture_A_time(
    handler: (call: Future_A_timeCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Future_A_timeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x14052288",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAdmin_actions_deadline(
    handler: (
      call: Admin_actions_deadlineCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Admin_actions_deadlineCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x405e28f8",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransfer_ownership_deadline(
    handler: (
      call: Transfer_ownership_deadlineCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Transfer_ownership_deadlineCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe0a0b586",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallFuture_fee(
    handler: (call: Future_feeCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Future_feeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x58680d0b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallFuture_admin_fee(
    handler: (
      call: Future_admin_feeCallTrace,
      ctx: TokenExchangeContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Future_admin_feeCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe3824462",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallFuture_owner(
    handler: (call: Future_ownerCallTrace, ctx: TokenExchangeContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: Future_ownerCallTrace,
      ctx: TokenExchangeContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x1ec0cdc1",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  public static filters = {
    TokenExchange(
      buyer?: string | null,
      sold_id?: null,
      tokens_sold?: null,
      bought_id?: null,
      tokens_bought?: null,
    ): TokenExchangeEventFilter {
      return templateContract.filters[
        "TokenExchange(address,int128,uint256,int128,uint256)"
      ](buyer, sold_id, tokens_sold, bought_id, tokens_bought);
    },
    AddLiquidity(
      provider?: string | null,
      token_amounts?: null,
      fees?: null,
      invariant?: null,
      token_supply?: null,
    ): AddLiquidityEventFilter {
      return templateContract.filters[
        "AddLiquidity(address,uint256[3],uint256[3],uint256,uint256)"
      ](provider, token_amounts, fees, invariant, token_supply);
    },
    RemoveLiquidity(
      provider?: string | null,
      token_amounts?: null,
      fees?: null,
      token_supply?: null,
    ): RemoveLiquidityEventFilter {
      return templateContract.filters[
        "RemoveLiquidity(address,uint256[3],uint256[3],uint256)"
      ](provider, token_amounts, fees, token_supply);
    },
    RemoveLiquidityOne(
      provider?: string | null,
      token_amount?: null,
      coin_amount?: null,
    ): RemoveLiquidityOneEventFilter {
      return templateContract.filters[
        "RemoveLiquidityOne(address,uint256,uint256)"
      ](provider, token_amount, coin_amount);
    },
    RemoveLiquidityImbalance(
      provider?: string | null,
      token_amounts?: null,
      fees?: null,
      invariant?: null,
      token_supply?: null,
    ): RemoveLiquidityImbalanceEventFilter {
      return templateContract.filters[
        "RemoveLiquidityImbalance(address,uint256[3],uint256[3],uint256,uint256)"
      ](provider, token_amounts, fees, invariant, token_supply);
    },
    CommitNewAdmin(
      deadline?: BigNumberish | null,
      admin?: string | null,
    ): CommitNewAdminEventFilter {
      return templateContract.filters["CommitNewAdmin(uint256,address)"](
        deadline,
        admin,
      );
    },
    NewAdmin(admin?: string | null): NewAdminEventFilter {
      return templateContract.filters["NewAdmin(address)"](admin);
    },
    CommitNewFee(
      deadline?: BigNumberish | null,
      fee?: null,
      admin_fee?: null,
    ): CommitNewFeeEventFilter {
      return templateContract.filters["CommitNewFee(uint256,uint256,uint256)"](
        deadline,
        fee,
        admin_fee,
      );
    },
    NewFee(fee?: null, admin_fee?: null): NewFeeEventFilter {
      return templateContract.filters["NewFee(uint256,uint256)"](
        fee,
        admin_fee,
      );
    },
    RampA(
      old_A?: null,
      new_A?: null,
      initial_time?: null,
      future_time?: null,
    ): RampAEventFilter {
      return templateContract.filters["RampA(uint256,uint256,uint256,uint256)"](
        old_A,
        new_A,
        initial_time,
        future_time,
      );
    },
    StopRampA(A?: null, t?: null): StopRampAEventFilter {
      return templateContract.filters["StopRampA(uint256,uint256)"](A, t);
    },
  };

  protected CreateBoundContractView(): TokenExchangeBoundContractView {
    const view = getTokenExchangeContract(
      this.config.network,
      this.config.address,
    );
    return new TokenExchangeBoundContractView(this.config.address, view);
  }

  public static bind(options: BindOptions): TokenExchangeProcessor {
    if (!options.name) {
      options.name = "TokenExchange";
    }
    let processor = getProcessor(options) as TokenExchangeProcessor;
    if (!processor) {
      processor = new TokenExchangeProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }
}

export class TokenExchangeProcessorTemplate extends BaseProcessorTemplate<
  TokenExchange,
  TokenExchangeBoundContractView
> {
  bindInternal(options: BindOptions) {
    if (!options.name) {
      options.name = "TokenExchange";
    }
    let processor = getProcessor(options) as TokenExchangeProcessor;
    if (!processor) {
      processor = new TokenExchangeProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }

  onEventTokenExchange(
    handler: (event: TokenExchangeEvent, ctx: TokenExchangeContext) => void,
    filter?: TokenExchangeEventFilter | TokenExchangeEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: TokenExchangeEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "TokenExchange(address,int128,uint256,int128,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventAddLiquidity(
    handler: (event: AddLiquidityEvent, ctx: TokenExchangeContext) => void,
    filter?: AddLiquidityEventFilter | AddLiquidityEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: AddLiquidityEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "AddLiquidity(address,uint256[3],uint256[3],uint256,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRemoveLiquidity(
    handler: (event: RemoveLiquidityEvent, ctx: TokenExchangeContext) => void,
    filter?: RemoveLiquidityEventFilter | RemoveLiquidityEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RemoveLiquidityEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "RemoveLiquidity(address,uint256[3],uint256[3],uint256)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRemoveLiquidityOne(
    handler: (
      event: RemoveLiquidityOneEvent,
      ctx: TokenExchangeContext,
    ) => void,
    filter?: RemoveLiquidityOneEventFilter | RemoveLiquidityOneEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RemoveLiquidityOneEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "RemoveLiquidityOne(address,uint256,uint256)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRemoveLiquidityImbalance(
    handler: (
      event: RemoveLiquidityImbalanceEvent,
      ctx: TokenExchangeContext,
    ) => void,
    filter?:
      | RemoveLiquidityImbalanceEventFilter
      | RemoveLiquidityImbalanceEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RemoveLiquidityImbalanceEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "RemoveLiquidityImbalance(address,uint256[3],uint256[3],uint256,uint256)"
      ](null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventCommitNewAdmin(
    handler: (event: CommitNewAdminEvent, ctx: TokenExchangeContext) => void,
    filter?: CommitNewAdminEventFilter | CommitNewAdminEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitNewAdminEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["CommitNewAdmin(uint256,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventNewAdmin(
    handler: (event: NewAdminEvent, ctx: TokenExchangeContext) => void,
    filter?: NewAdminEventFilter | NewAdminEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: NewAdminEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["NewAdmin(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventCommitNewFee(
    handler: (event: CommitNewFeeEvent, ctx: TokenExchangeContext) => void,
    filter?: CommitNewFeeEventFilter | CommitNewFeeEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitNewFeeEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "CommitNewFee(uint256,uint256,uint256)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventNewFee(
    handler: (event: NewFeeEvent, ctx: TokenExchangeContext) => void,
    filter?: NewFeeEventFilter | NewFeeEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: NewFeeEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["NewFee(uint256,uint256)"](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRampA(
    handler: (event: RampAEvent, ctx: TokenExchangeContext) => void,
    filter?: RampAEventFilter | RampAEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RampAEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "RampA(uint256,uint256,uint256,uint256)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventStopRampA(
    handler: (event: StopRampAEvent, ctx: TokenExchangeContext) => void,
    filter?: StopRampAEventFilter | StopRampAEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: StopRampAEvent,
      ctx: TokenExchangeContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["StopRampA(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }
}

export function getTokenExchangeContract(
  chainId: EthChainId,
  address: string,
): TokenExchangeContractView {
  let contract = getContractByABI(
    "TokenExchange",
    address,
    chainId,
  ) as TokenExchangeContractView;
  if (!contract) {
    const rawContract = TokenExchange__factory.connect(
      address,
      getProvider(chainId as any),
    );
    contract = new TokenExchangeContractView(rawContract);
    addContractByABI("TokenExchange", address, chainId, contract);
  }
  return contract;
}

export function getTokenExchangeContractOnContext(
  context: EthContext,
  address: string,
): TokenExchangeBoundContractView {
  const view = getTokenExchangeContract(context.getChainId(), address);
  const boundView = new TokenExchangeBoundContractView(address, view);
  boundView.context = context;
  if (boundView.callStatic) {
    boundView.callStatic.context = context;
  }
  return boundView;
}
