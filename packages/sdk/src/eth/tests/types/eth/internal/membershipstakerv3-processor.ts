/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish, Overrides, BytesLike } from "ethers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  BoundContractView,
  ContractContext,
  ContractView,
  DummyProvider,
  EthChainId,
  TypedCallTrace,
  EthContext,
  EthFetchConfig,
  PreprocessResult,
  encodeCallData,
} from "@sentio/sdk/eth";
import { EthCallParam, EthCallContext, PreparedData } from "@sentio/protos";

import { MembershipStakerV3__factory } from "./index.js";
import {
  MembershipStakerV3,
  AdminChangedEvent,
  AdminChangedEventFilter,
  BeaconUpgradedEvent,
  BeaconUpgradedEventFilter,
  HarvestEvent,
  HarvestEventFilter,
  MembershipStakedEvent,
  MembershipStakedEventFilter,
  MembershipUnstakedEvent,
  MembershipUnstakedEventFilter,
  OwnershipTransferredEvent,
  OwnershipTransferredEventFilter,
  RyoshiStakedEvent,
  RyoshiStakedEventFilter,
  RyoshiUnstakedEvent,
  RyoshiUnstakedEventFilter,
  UpgradedEvent,
  UpgradedEventFilter,
} from "./MembershipStakerV3.js";

export interface AmountRyoshiStakedCallObject {
  _address: string;
}

export type AmountRyoshiStakedCallTrace = TypedCallTrace<
  [string],
  AmountRyoshiStakedCallObject
>;

export interface AmountStakedCallObject {
  staker: string;
}

export type AmountStakedCallTrace = TypedCallTrace<
  [string],
  AmountStakedCallObject
>;

export interface CompletedPoolCallObject {}

export type CompletedPoolCallTrace = TypedCallTrace<
  [],
  CompletedPoolCallObject
>;

export interface CurPoolCallObject {}

export type CurPoolCallTrace = TypedCallTrace<[], CurPoolCallObject>;

export interface CurrentPoolIdCallObject {}

export type CurrentPoolIdCallTrace = TypedCallTrace<
  [],
  CurrentPoolIdCallObject
>;

export interface CurrentStakedCallObject {}

export type CurrentStakedCallTrace = TypedCallTrace<
  [],
  CurrentStakedCallObject
>;

export interface EndInitPeriodCallObject {}

export type EndInitPeriodCallTrace = TypedCallTrace<
  [],
  EndInitPeriodCallObject
>;

export interface EpochLengthCallObject {}

export type EpochLengthCallTrace = TypedCallTrace<[], EpochLengthCallObject>;

export interface GetReleasedRewardCallObject {
  _address: string;
}

export type GetReleasedRewardCallTrace = TypedCallTrace<
  [string],
  GetReleasedRewardCallObject
>;

export interface GetRewardCallObject {
  _address: string;
}

export type GetRewardCallTrace = TypedCallTrace<[string], GetRewardCallObject>;

export interface HarvestCallObject {
  _address: string;
}

export type HarvestCallTrace = TypedCallTrace<[string], HarvestCallObject>;

export interface InitializeCallObject {
  _memberships: string;
}

export type InitializeCallTrace = TypedCallTrace<
  [string],
  InitializeCallObject
>;

export interface NameCallObject {}

export type NameCallTrace = TypedCallTrace<[], NameCallObject>;

export interface OnERC1155BatchReceivedCallObject {}

export type OnERC1155BatchReceivedCallTrace = TypedCallTrace<
  [string, string, bigint[], bigint[], string],
  OnERC1155BatchReceivedCallObject
>;

export interface OnERC1155ReceivedCallObject {
  operator: string;
}

export type OnERC1155ReceivedCallTrace = TypedCallTrace<
  [string, string, bigint, bigint, string],
  OnERC1155ReceivedCallObject
>;

export interface OwnerCallObject {}

export type OwnerCallTrace = TypedCallTrace<[], OwnerCallObject>;

export interface PeriodEndCallObject {}

export type PeriodEndCallTrace = TypedCallTrace<[], PeriodEndCallObject>;

export interface PoolBalanceCallObject {}

export type PoolBalanceCallTrace = TypedCallTrace<[], PoolBalanceCallObject>;

export interface PoolsCallObject {}

export type PoolsCallTrace = TypedCallTrace<[bigint], PoolsCallObject>;

export interface RenounceOwnershipCallObject {}

export type RenounceOwnershipCallTrace = TypedCallTrace<
  [],
  RenounceOwnershipCallObject
>;

export interface RewardsIdCallObject {}

export type RewardsIdCallTrace = TypedCallTrace<[], RewardsIdCallObject>;

export interface RewardsPaidCallObject {}

export type RewardsPaidCallTrace = TypedCallTrace<[], RewardsPaidCallObject>;

export interface SetEpochLengthCallObject {
  _length: bigint;
}

export type SetEpochLengthCallTrace = TypedCallTrace<
  [bigint],
  SetEpochLengthCallObject
>;

export interface SetRyoshiVIPCallObject {
  _address: string;
}

export type SetRyoshiVIPCallTrace = TypedCallTrace<
  [string],
  SetRyoshiVIPCallObject
>;

export interface StakeCallObject {
  amount: bigint;
}

export type StakeCallTrace = TypedCallTrace<[bigint], StakeCallObject>;

export interface StakeRyoshiCallObject {
  _ids: bigint[];
}

export type StakeRyoshiCallTrace = TypedCallTrace<
  [bigint[]],
  StakeRyoshiCallObject
>;

export interface StakedRyoshiCallObject {}

export type StakedRyoshiCallTrace = TypedCallTrace<
  [bigint],
  StakedRyoshiCallObject
>;

export interface SupportsInterfaceCallObject {
  interfaceId: string;
}

export type SupportsInterfaceCallTrace = TypedCallTrace<
  [string],
  SupportsInterfaceCallObject
>;

export interface TotalStakedCallObject {}

export type TotalStakedCallTrace = TypedCallTrace<[], TotalStakedCallObject>;

export interface TransferOwnershipCallObject {
  newOwner: string;
}

export type TransferOwnershipCallTrace = TypedCallTrace<
  [string],
  TransferOwnershipCallObject
>;

export interface UnstakeCallObject {
  amount: bigint;
}

export type UnstakeCallTrace = TypedCallTrace<[bigint], UnstakeCallObject>;

export interface UnstakeRyoshiCallObject {
  _ids: bigint[];
}

export type UnstakeRyoshiCallTrace = TypedCallTrace<
  [bigint[]],
  UnstakeRyoshiCallObject
>;

export interface UpdatePoolCallObject {}

export type UpdatePoolCallTrace = TypedCallTrace<[], UpdatePoolCallObject>;

export interface UpgradeToCallObject {
  newImplementation: string;
}

export type UpgradeToCallTrace = TypedCallTrace<[string], UpgradeToCallObject>;

export interface UpgradeToAndCallCallObject {
  newImplementation: string;
  data: string;
}

export type UpgradeToAndCallCallTrace = TypedCallTrace<
  [string, string],
  UpgradeToAndCallCallObject
>;

const templateContract = MembershipStakerV3__factory.connect(
  "0x0",
  DummyProvider,
);

export class MembershipStakerV3ContractView extends ContractView<MembershipStakerV3> {
  constructor(contract: MembershipStakerV3) {
    super(contract);
    this.callStatic.contract = contract;
  }

  async amountRyoshiStaked(
    _address: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("amountRyoshiStaked(address)")(
        _address,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async amountStaked(
    staker: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("amountStaked(address)")(
        staker,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async completedPool(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("completedPool()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async curPool(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("curPool()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async currentPoolId(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("currentPoolId()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async currentStaked(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<[string[], bigint[]]> {
    try {
      return await this.contract.getFunction("currentStaked()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async epochLength(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("epochLength()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getReleasedReward(
    _address: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getReleasedReward(address)")(
        _address,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getReward(
    _address: string,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getReward(address)")(
        _address,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async name(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("name()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async owner(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("owner()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async periodEnd(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("periodEnd()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async poolBalance(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("poolBalance()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async pools(
    arg0: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("pools(uint256)")(
        arg0,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async rewardsId(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("rewardsId()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async rewardsPaid(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("rewardsPaid()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async stakedRyoshi(
    arg0: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("stakedRyoshi(uint256)")(
        arg0,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async supportsInterface(
    interfaceId: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("supportsInterface(bytes4)")(
        interfaceId,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async totalStaked(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("totalStaked()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  callStatic = {
    contract: this.contract,

    async endInitPeriod(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("endInitPeriod()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async harvest(
      _address: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("harvest(address)")
          .staticCall(_address, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async initialize(
      _memberships: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("initialize(address)")
          .staticCall(_memberships, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<string> {
      try {
        return await this.contract
          .getFunction(
            "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          )
          .staticCall(arg0, arg1, arg2, arg3, arg4, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async onERC1155Received(
      operator: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<string> {
      try {
        return await this.contract
          .getFunction(
            "onERC1155Received(address,address,uint256,uint256,bytes)",
          )
          .staticCall(operator, arg1, arg2, arg3, arg4, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async renounceOwnership(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("renounceOwnership()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setEpochLength(
      _length: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setEpochLength(uint256)")
          .staticCall(_length, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setRyoshiVIP(
      _address: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setRyoshiVIP(address)")
          .staticCall(_address, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async stake(
      amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("stake(uint256)")
          .staticCall(amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async stakeRyoshi(
      _ids: BigNumberish[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("stakeRyoshi(uint256[])")
          .staticCall(_ids, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async transferOwnership(
      newOwner: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("transferOwnership(address)")
          .staticCall(newOwner, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async unstake(
      amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("unstake(uint256)")
          .staticCall(amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async unstakeRyoshi(
      _ids: BigNumberish[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("unstakeRyoshi(uint256[])")
          .staticCall(_ids, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async updatePool(
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("updatePool()")
          .staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async upgradeTo(
      newImplementation: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("upgradeTo(address)")
          .staticCall(newImplementation, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("upgradeToAndCall(address,bytes)")
          .staticCall(newImplementation, data, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
  };

  encodeCall = {
    amountRyoshiStaked(
      _address: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "amountRyoshiStaked",
        "function amountRyoshiStaked(address)",
        [_address],
      );
    },
    amountStaked(staker: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "amountStaked",
        "function amountStaked(address)",
        [staker],
      );
    },
    completedPool(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "completedPool",
        "function completedPool()",
        [],
      );
    },
    curPool(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "curPool", "function curPool()", []);
    },
    currentPoolId(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "currentPoolId",
        "function currentPoolId()",
        [],
      );
    },
    currentStaked(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "currentStaked",
        "function currentStaked()",
        [],
      );
    },
    endInitPeriod(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "endInitPeriod",
        "function endInitPeriod()",
        [],
      );
    },
    epochLength(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "epochLength",
        "function epochLength()",
        [],
      );
    },
    getReleasedReward(
      _address: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getReleasedReward",
        "function getReleasedReward(address)",
        [_address],
      );
    },
    getReward(_address: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getReward",
        "function getReward(address)",
        [_address],
      );
    },
    harvest(_address: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "harvest",
        "function harvest(address)",
        [_address],
      );
    },
    initialize(
      _memberships: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "initialize",
        "function initialize(address)",
        [_memberships],
      );
    },
    name(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "name", "function name()", []);
    },
    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "onERC1155BatchReceived",
        "function onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
        [arg0, arg1, arg2, arg3, arg4],
      );
    },
    onERC1155Received(
      operator: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "onERC1155Received",
        "function onERC1155Received(address,address,uint256,uint256,bytes)",
        [operator, arg1, arg2, arg3, arg4],
      );
    },
    owner(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "owner", "function owner()", []);
    },
    periodEnd(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "periodEnd",
        "function periodEnd()",
        [],
      );
    },
    poolBalance(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "poolBalance",
        "function poolBalance()",
        [],
      );
    },
    pools(arg0: BigNumberish, callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "pools", "function pools(uint256)", [
        arg0,
      ]);
    },
    renounceOwnership(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "renounceOwnership",
        "function renounceOwnership()",
        [],
      );
    },
    rewardsId(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "rewardsId",
        "function rewardsId()",
        [],
      );
    },
    rewardsPaid(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "rewardsPaid",
        "function rewardsPaid()",
        [],
      );
    },
    setEpochLength(
      _length: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "setEpochLength",
        "function setEpochLength(uint256)",
        [_length],
      );
    },
    setRyoshiVIP(_address: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "setRyoshiVIP",
        "function setRyoshiVIP(address)",
        [_address],
      );
    },
    stake(amount: BigNumberish, callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "stake", "function stake(uint256)", [
        amount,
      ]);
    },
    stakeRyoshi(
      _ids: BigNumberish[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "stakeRyoshi",
        "function stakeRyoshi(uint256[])",
        [_ids],
      );
    },
    stakedRyoshi(
      arg0: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "stakedRyoshi",
        "function stakedRyoshi(uint256)",
        [arg0],
      );
    },
    supportsInterface(
      interfaceId: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "supportsInterface",
        "function supportsInterface(bytes4)",
        [interfaceId],
      );
    },
    totalStaked(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "totalStaked",
        "function totalStaked()",
        [],
      );
    },
    transferOwnership(
      newOwner: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "transferOwnership",
        "function transferOwnership(address)",
        [newOwner],
      );
    },
    unstake(amount: BigNumberish, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "unstake",
        "function unstake(uint256)",
        [amount],
      );
    },
    unstakeRyoshi(
      _ids: BigNumberish[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "unstakeRyoshi",
        "function unstakeRyoshi(uint256[])",
        [_ids],
      );
    },
    updatePool(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "updatePool",
        "function updatePool()",
        [],
      );
    },
    upgradeTo(
      newImplementation: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "upgradeTo",
        "function upgradeTo(address)",
        [newImplementation],
      );
    },
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "upgradeToAndCall",
        "function upgradeToAndCall(address,bytes)",
        [newImplementation, data],
      );
    },
  };
}

export class MembershipStakerV3BoundContractView extends BoundContractView<
  MembershipStakerV3,
  MembershipStakerV3ContractView
> {
  async amountRyoshiStaked(
    _address: string,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.amountRyoshiStaked(
      _address,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async amountStaked(staker: string, overrides?: Overrides): Promise<bigint> {
    return await this.view.amountStaked(
      staker,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async completedPool(overrides?: Overrides): Promise<string> {
    return await this.view.completedPool(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async curPool(overrides?: Overrides): Promise<string> {
    return await this.view.curPool(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async currentPoolId(overrides?: Overrides): Promise<bigint> {
    return await this.view.currentPoolId(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async currentStaked(overrides?: Overrides): Promise<[string[], bigint[]]> {
    return await this.view.currentStaked(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async epochLength(overrides?: Overrides): Promise<bigint> {
    return await this.view.epochLength(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getReleasedReward(
    _address: string,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.getReleasedReward(
      _address,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getReward(_address: string, overrides?: Overrides): Promise<bigint> {
    return await this.view.getReward(
      _address,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async name(overrides?: Overrides): Promise<string> {
    return await this.view.name(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async owner(overrides?: Overrides): Promise<string> {
    return await this.view.owner(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async periodEnd(overrides?: Overrides): Promise<bigint> {
    return await this.view.periodEnd(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async poolBalance(overrides?: Overrides): Promise<bigint> {
    return await this.view.poolBalance(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async pools(arg0: BigNumberish, overrides?: Overrides): Promise<string> {
    return await this.view.pools(
      arg0,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async rewardsId(overrides?: Overrides): Promise<bigint> {
    return await this.view.rewardsId(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async rewardsPaid(overrides?: Overrides): Promise<bigint> {
    return await this.view.rewardsPaid(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async stakedRyoshi(
    arg0: BigNumberish,
    overrides?: Overrides,
  ): Promise<string> {
    return await this.view.stakedRyoshi(
      arg0,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async supportsInterface(
    interfaceId: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.supportsInterface(
      interfaceId,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async totalStaked(overrides?: Overrides): Promise<bigint> {
    return await this.view.totalStaked(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  callStatic = {
    view: this.view,
    context: this.context,

    async endInitPeriod(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.endInitPeriod(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async harvest(_address: string, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.harvest(
        _address,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async initialize(
      _memberships: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.initialize(
        _memberships,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides,
    ): Promise<string> {
      return await this.view.callStatic.onERC1155BatchReceived(
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async onERC1155Received(
      operator: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides,
    ): Promise<string> {
      return await this.view.callStatic.onERC1155Received(
        operator,
        arg1,
        arg2,
        arg3,
        arg4,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async renounceOwnership(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.renounceOwnership(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setEpochLength(
      _length: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.setEpochLength(
        _length,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setRyoshiVIP(_address: string, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.setRyoshiVIP(
        _address,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async stake(amount: BigNumberish, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.stake(
        amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async stakeRyoshi(
      _ids: BigNumberish[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.stakeRyoshi(
        _ids,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async transferOwnership(
      newOwner: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.transferOwnership(
        newOwner,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async unstake(amount: BigNumberish, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.unstake(
        amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async unstakeRyoshi(
      _ids: BigNumberish[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.unstakeRyoshi(
        _ids,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async updatePool(overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.updatePool(
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async upgradeTo(
      newImplementation: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.upgradeTo(
        newImplementation,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.upgradeToAndCall(
        newImplementation,
        data,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
  };

  encodeCall = {
    view: this.view,
    context: this.context,

    amountRyoshiStaked(_address: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.amountRyoshiStaked(_address, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    amountStaked(staker: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.amountStaked(staker, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    completedPool(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.completedPool({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    curPool(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.curPool({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    currentPoolId(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.currentPoolId({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    currentStaked(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.currentStaked({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    endInitPeriod(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.endInitPeriod({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    epochLength(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.epochLength({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getReleasedReward(_address: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getReleasedReward(_address, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getReward(_address: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getReward(_address, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    harvest(_address: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.harvest(_address, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    initialize(_memberships: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.initialize(_memberships, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    name(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.name({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.onERC1155BatchReceived(
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    onERC1155Received(
      operator: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.onERC1155Received(
        operator,
        arg1,
        arg2,
        arg3,
        arg4,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    owner(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.owner({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    periodEnd(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.periodEnd({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    poolBalance(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.poolBalance({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    pools(arg0: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.pools(arg0, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    renounceOwnership(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.renounceOwnership({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    rewardsId(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.rewardsId({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    rewardsPaid(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.rewardsPaid({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setEpochLength(_length: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.setEpochLength(_length, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setRyoshiVIP(_address: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.setRyoshiVIP(_address, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    stake(amount: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.stake(amount, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    stakeRyoshi(_ids: BigNumberish[], overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.stakeRyoshi(_ids, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    stakedRyoshi(arg0: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.stakedRyoshi(arg0, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.supportsInterface(interfaceId, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    totalStaked(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.totalStaked({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transferOwnership(newOwner: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.transferOwnership(newOwner, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    unstake(amount: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.unstake(amount, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    unstakeRyoshi(_ids: BigNumberish[], overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.unstakeRyoshi(_ids, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    updatePool(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.updatePool({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    upgradeTo(newImplementation: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.upgradeTo(newImplementation, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.upgradeToAndCall(newImplementation, data, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
  };
}

export type MembershipStakerV3Context = ContractContext<
  MembershipStakerV3,
  MembershipStakerV3BoundContractView
>;

export class MembershipStakerV3Processor extends BaseProcessor<
  MembershipStakerV3,
  MembershipStakerV3BoundContractView
> {
  onEventAdminChanged(
    handler: (event: AdminChangedEvent, ctx: MembershipStakerV3Context) => void,
    filter?: AdminChangedEventFilter | AdminChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: AdminChangedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["AdminChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBeaconUpgraded(
    handler: (
      event: BeaconUpgradedEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?: BeaconUpgradedEventFilter | BeaconUpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BeaconUpgradedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BeaconUpgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventHarvest(
    handler: (event: HarvestEvent, ctx: MembershipStakerV3Context) => void,
    filter?: HarvestEventFilter | HarvestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: HarvestEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Harvest(address,uint256)"](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventMembershipStaked(
    handler: (
      event: MembershipStakedEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?: MembershipStakedEventFilter | MembershipStakedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: MembershipStakedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["MembershipStaked(address,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventMembershipUnstaked(
    handler: (
      event: MembershipUnstakedEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?: MembershipUnstakedEventFilter | MembershipUnstakedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: MembershipUnstakedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["MembershipUnstaked(address,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOwnershipTransferred(
    handler: (
      event: OwnershipTransferredEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OwnershipTransferredEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRyoshiStaked(
    handler: (event: RyoshiStakedEvent, ctx: MembershipStakerV3Context) => void,
    filter?: RyoshiStakedEventFilter | RyoshiStakedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RyoshiStakedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["RyoshiStaked(address,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRyoshiUnstaked(
    handler: (
      event: RyoshiUnstakedEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?: RyoshiUnstakedEventFilter | RyoshiUnstakedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RyoshiUnstakedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["RyoshiUnstaked(address,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventUpgraded(
    handler: (event: UpgradedEvent, ctx: MembershipStakerV3Context) => void,
    filter?: UpgradedEventFilter | UpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: UpgradedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Upgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onCallAmountRyoshiStaked(
    handler: (
      call: AmountRyoshiStakedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AmountRyoshiStakedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe210d4db",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAmountStaked(
    handler: (
      call: AmountStakedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AmountStakedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xef40a670",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCompletedPool(
    handler: (
      call: CompletedPoolCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: CompletedPoolCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3702615e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCurPool(
    handler: (call: CurPoolCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: CurPoolCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf4a9081d",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCurrentPoolId(
    handler: (
      call: CurrentPoolIdCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: CurrentPoolIdCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xebc5163b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCurrentStaked(
    handler: (
      call: CurrentStakedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: CurrentStakedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x695464e9",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallEndInitPeriod(
    handler: (
      call: EndInitPeriodCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: EndInitPeriodCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x0e0f634e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallEpochLength(
    handler: (
      call: EpochLengthCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: EpochLengthCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x57d775f8",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetReleasedReward(
    handler: (
      call: GetReleasedRewardCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetReleasedRewardCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xb8b81472",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetReward(
    handler: (call: GetRewardCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetRewardCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xc00007b0",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallHarvest(
    handler: (call: HarvestCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: HarvestCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x0e5c011e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallInitialize(
    handler: (
      call: InitializeCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: InitializeCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xc4d66de8",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallName(
    handler: (call: NameCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: NameCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x06fdde03",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallOnERC1155BatchReceived(
    handler: (
      call: OnERC1155BatchReceivedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: OnERC1155BatchReceivedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xbc197c81",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallOnERC1155Received(
    handler: (
      call: OnERC1155ReceivedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: OnERC1155ReceivedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf23a6e61",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallOwner(
    handler: (call: OwnerCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: OwnerCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x8da5cb5b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPeriodEnd(
    handler: (call: PeriodEndCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PeriodEndCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x506ec095",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPoolBalance(
    handler: (
      call: PoolBalanceCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PoolBalanceCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x96365d44",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallPools(
    handler: (call: PoolsCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: PoolsCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xac4afa38",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRenounceOwnership(
    handler: (
      call: RenounceOwnershipCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RenounceOwnershipCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x715018a6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRewardsId(
    handler: (call: RewardsIdCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RewardsIdCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xdfb19e5b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRewardsPaid(
    handler: (
      call: RewardsPaidCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RewardsPaidCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x69d8d6d2",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetEpochLength(
    handler: (
      call: SetEpochLengthCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetEpochLengthCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x54eea796",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetRyoshiVIP(
    handler: (
      call: SetRyoshiVIPCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetRyoshiVIPCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x75d6417b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallStake(
    handler: (call: StakeCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: StakeCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa694fc3a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallStakeRyoshi(
    handler: (
      call: StakeRyoshiCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: StakeRyoshiCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x28cef9ca",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallStakedRyoshi(
    handler: (
      call: StakedRyoshiCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: StakedRyoshiCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x5c23a49f",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSupportsInterface(
    handler: (
      call: SupportsInterfaceCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SupportsInterfaceCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x01ffc9a7",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTotalStaked(
    handler: (
      call: TotalStakedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TotalStakedCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x817b1cd2",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransferOwnership(
    handler: (
      call: TransferOwnershipCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TransferOwnershipCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf2fde38b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUnstake(
    handler: (call: UnstakeCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UnstakeCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x2e17de78",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUnstakeRyoshi(
    handler: (
      call: UnstakeRyoshiCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UnstakeRyoshiCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x41e316c3",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUpdatePool(
    handler: (
      call: UpdatePoolCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UpdatePoolCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe3161ddd",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUpgradeTo(
    handler: (call: UpgradeToCallTrace, ctx: MembershipStakerV3Context) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UpgradeToCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3659cfe6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUpgradeToAndCall(
    handler: (
      call: UpgradeToAndCallCallTrace,
      ctx: MembershipStakerV3Context,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UpgradeToAndCallCallTrace,
      ctx: MembershipStakerV3Context,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4f1ef286",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  public static filters = {
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter {
      return templateContract.filters["AdminChanged(address,address)"](
        previousAdmin,
        newAdmin,
      );
    },
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter {
      return templateContract.filters["BeaconUpgraded(address)"](beacon);
    },
    Harvest(arg0?: string | null, amount?: null): HarvestEventFilter {
      return templateContract.filters["Harvest(address,uint256)"](arg0, amount);
    },
    MembershipStaked(
      staker?: string | null,
      totalStaked?: null,
    ): MembershipStakedEventFilter {
      return templateContract.filters["MembershipStaked(address,uint256)"](
        staker,
        totalStaked,
      );
    },
    MembershipUnstaked(
      staker?: string | null,
      totalStaked?: null,
    ): MembershipUnstakedEventFilter {
      return templateContract.filters["MembershipUnstaked(address,uint256)"](
        staker,
        totalStaked,
      );
    },
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter {
      return templateContract.filters["OwnershipTransferred(address,address)"](
        previousOwner,
        newOwner,
      );
    },
    RyoshiStaked(
      owner?: string | null,
      tokenId?: BigNumberish | null,
    ): RyoshiStakedEventFilter {
      return templateContract.filters["RyoshiStaked(address,uint256)"](
        owner,
        tokenId,
      );
    },
    RyoshiUnstaked(
      owner?: string | null,
      tokenId?: BigNumberish | null,
    ): RyoshiUnstakedEventFilter {
      return templateContract.filters["RyoshiUnstaked(address,uint256)"](
        owner,
        tokenId,
      );
    },
    Upgraded(implementation?: string | null): UpgradedEventFilter {
      return templateContract.filters["Upgraded(address)"](implementation);
    },
  };

  protected CreateBoundContractView(): MembershipStakerV3BoundContractView {
    const view = getMembershipStakerV3Contract(
      this.config.network,
      this.config.address,
    );
    return new MembershipStakerV3BoundContractView(this.config.address, view);
  }

  public static bind(options: BindOptions): MembershipStakerV3Processor {
    if (!options.name) {
      options.name = "MembershipStakerV3";
    }
    let processor = getProcessor(options) as MembershipStakerV3Processor;
    if (!processor) {
      processor = new MembershipStakerV3Processor(options);
      addProcessor(options, processor);
    }
    return processor;
  }
}

export class MembershipStakerV3ProcessorTemplate extends BaseProcessorTemplate<
  MembershipStakerV3,
  MembershipStakerV3BoundContractView
> {
  bindInternal(options: BindOptions) {
    if (!options.name) {
      options.name = "MembershipStakerV3";
    }
    let processor = getProcessor(options) as MembershipStakerV3Processor;
    if (!processor) {
      processor = new MembershipStakerV3Processor(options);
      addProcessor(options, processor);
    }
    return processor;
  }

  onEventAdminChanged(
    handler: (event: AdminChangedEvent, ctx: MembershipStakerV3Context) => void,
    filter?: AdminChangedEventFilter | AdminChangedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: AdminChangedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["AdminChanged(address,address)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventBeaconUpgraded(
    handler: (
      event: BeaconUpgradedEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?: BeaconUpgradedEventFilter | BeaconUpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: BeaconUpgradedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["BeaconUpgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventHarvest(
    handler: (event: HarvestEvent, ctx: MembershipStakerV3Context) => void,
    filter?: HarvestEventFilter | HarvestEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: HarvestEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Harvest(address,uint256)"](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventMembershipStaked(
    handler: (
      event: MembershipStakedEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?: MembershipStakedEventFilter | MembershipStakedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: MembershipStakedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["MembershipStaked(address,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventMembershipUnstaked(
    handler: (
      event: MembershipUnstakedEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?: MembershipUnstakedEventFilter | MembershipUnstakedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: MembershipUnstakedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["MembershipUnstaked(address,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventOwnershipTransferred(
    handler: (
      event: OwnershipTransferredEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?:
      | OwnershipTransferredEventFilter
      | OwnershipTransferredEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: OwnershipTransferredEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "OwnershipTransferred(address,address)"
      ](null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRyoshiStaked(
    handler: (event: RyoshiStakedEvent, ctx: MembershipStakerV3Context) => void,
    filter?: RyoshiStakedEventFilter | RyoshiStakedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RyoshiStakedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["RyoshiStaked(address,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRyoshiUnstaked(
    handler: (
      event: RyoshiUnstakedEvent,
      ctx: MembershipStakerV3Context,
    ) => void,
    filter?: RyoshiUnstakedEventFilter | RyoshiUnstakedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RyoshiUnstakedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["RyoshiUnstaked(address,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventUpgraded(
    handler: (event: UpgradedEvent, ctx: MembershipStakerV3Context) => void,
    filter?: UpgradedEventFilter | UpgradedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: UpgradedEvent,
      ctx: MembershipStakerV3Context,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["Upgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }
}

export function getMembershipStakerV3Contract(
  chainId: EthChainId,
  address: string,
): MembershipStakerV3ContractView {
  let contract = getContractByABI(
    "MembershipStakerV3",
    address,
    chainId,
  ) as MembershipStakerV3ContractView;
  if (!contract) {
    const rawContract = MembershipStakerV3__factory.connect(
      address,
      getProvider(chainId as any),
    );
    contract = new MembershipStakerV3ContractView(rawContract);
    addContractByABI("MembershipStakerV3", address, chainId, contract);
  }
  return contract;
}

export function getMembershipStakerV3ContractOnContext(
  context: EthContext,
  address: string,
): MembershipStakerV3BoundContractView {
  const view = getMembershipStakerV3Contract(context.getChainId(), address);
  const boundView = new MembershipStakerV3BoundContractView(address, view);
  boundView.context = context;
  if (boundView.callStatic) {
    boundView.callStatic.context = context;
  }
  return boundView;
}
