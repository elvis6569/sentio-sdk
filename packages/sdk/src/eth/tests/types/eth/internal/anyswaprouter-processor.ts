/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish, Overrides, BytesLike } from "ethers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  BoundContractView,
  ContractContext,
  ContractView,
  DummyProvider,
  EthChainId,
  TypedCallTrace,
  EthContext,
  EthFetchConfig,
  PreprocessResult,
  encodeCallData,
} from "@sentio/sdk/eth";
import { EthCallParam, EthCallContext, PreparedData } from "@sentio/protos";

import { AnyswapRouter__factory } from "./index.js";
import {
  AnyswapRouter,
  LogAnySwapInEvent,
  LogAnySwapInEventFilter,
  LogAnySwapOut_address_address_address_uint256_uint256_uint256_Event,
  LogAnySwapOut_address_address_address_uint256_uint256_uint256_EventFilter,
  LogAnySwapOut_address_address_string_uint256_uint256_uint256_Event,
  LogAnySwapOut_address_address_string_uint256_uint256_uint256_EventFilter,
  LogAnySwapTradeTokensForNativeEvent,
  LogAnySwapTradeTokensForNativeEventFilter,
  LogAnySwapTradeTokensForTokensEvent,
  LogAnySwapTradeTokensForTokensEventFilter,
  LogChangeMPCEvent,
  LogChangeMPCEventFilter,
  LogChangeRouterEvent,
  LogChangeRouterEventFilter,
} from "./AnyswapRouter.js";

export interface AnySwapFeeToCallObject {
  token: string;
  amount: bigint;
}

export type AnySwapFeeToCallTrace = TypedCallTrace<
  [string, bigint],
  AnySwapFeeToCallObject
>;

export interface AnySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_arrayCallObject {
  txs: string[];
  tokens: string[];
  to: string[];
  amounts: bigint[];
  fromChainIDs: bigint[];
}

export type AnySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_arrayCallTrace =
  TypedCallTrace<
    [string[], string[], string[], bigint[], bigint[]],
    AnySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_arrayCallObject
  >;

export interface AnySwapIn_bytes32_address_address_uint256_uint256CallObject {
  txs: string;
  token: string;
  to: string;
  amount: bigint;
  fromChainID: bigint;
}

export type AnySwapIn_bytes32_address_address_uint256_uint256CallTrace =
  TypedCallTrace<
    [string, string, string, bigint, bigint],
    AnySwapIn_bytes32_address_address_uint256_uint256CallObject
  >;

export interface AnySwapInAutoCallObject {
  txs: string;
  token: string;
  to: string;
  amount: bigint;
  fromChainID: bigint;
}

export type AnySwapInAutoCallTrace = TypedCallTrace<
  [string, string, string, bigint, bigint],
  AnySwapInAutoCallObject
>;

export interface AnySwapInExactTokensForNativeCallObject {
  txs: string;
  amountIn: bigint;
  amountOutMin: bigint;
  path: string[];
  to: string;
  deadline: bigint;
  fromChainID: bigint;
}

export type AnySwapInExactTokensForNativeCallTrace = TypedCallTrace<
  [string, bigint, bigint, string[], string, bigint, bigint],
  AnySwapInExactTokensForNativeCallObject
>;

export interface AnySwapInExactTokensForTokensCallObject {
  txs: string;
  amountIn: bigint;
  amountOutMin: bigint;
  path: string[];
  to: string;
  deadline: bigint;
  fromChainID: bigint;
}

export type AnySwapInExactTokensForTokensCallTrace = TypedCallTrace<
  [string, bigint, bigint, string[], string, bigint, bigint],
  AnySwapInExactTokensForTokensCallObject
>;

export interface AnySwapInUnderlyingCallObject {
  txs: string;
  token: string;
  to: string;
  amount: bigint;
  fromChainID: bigint;
}

export type AnySwapInUnderlyingCallTrace = TypedCallTrace<
  [string, string, string, bigint, bigint],
  AnySwapInUnderlyingCallObject
>;

export interface AnySwapOut_address_address_uint256_uint256CallObject {
  token: string;
  to: string;
  amount: bigint;
  toChainID: bigint;
}

export type AnySwapOut_address_address_uint256_uint256CallTrace =
  TypedCallTrace<
    [string, string, bigint, bigint],
    AnySwapOut_address_address_uint256_uint256CallObject
  >;

export interface AnySwapOut_address_string_uint256_uint256CallObject {
  token: string;
  to: string;
  amount: bigint;
  toChainID: bigint;
}

export type AnySwapOut_address_string_uint256_uint256CallTrace = TypedCallTrace<
  [string, string, bigint, bigint],
  AnySwapOut_address_string_uint256_uint256CallObject
>;

export interface AnySwapOut_address_array_address_array_uint256_array_uint256_arrayCallObject {
  tokens: string[];
  to: string[];
  amounts: bigint[];
  toChainIDs: bigint[];
}

export type AnySwapOut_address_array_address_array_uint256_array_uint256_arrayCallTrace =
  TypedCallTrace<
    [string[], string[], bigint[], bigint[]],
    AnySwapOut_address_array_address_array_uint256_array_uint256_arrayCallObject
  >;

export interface AnySwapOutExactTokensForNativeCallObject {
  amountIn: bigint;
  amountOutMin: bigint;
  path: string[];
  to: string;
  deadline: bigint;
  toChainID: bigint;
}

export type AnySwapOutExactTokensForNativeCallTrace = TypedCallTrace<
  [bigint, bigint, string[], string, bigint, bigint],
  AnySwapOutExactTokensForNativeCallObject
>;

export interface AnySwapOutExactTokensForNativeUnderlyingCallObject {
  amountIn: bigint;
  amountOutMin: bigint;
  path: string[];
  to: string;
  deadline: bigint;
  toChainID: bigint;
}

export type AnySwapOutExactTokensForNativeUnderlyingCallTrace = TypedCallTrace<
  [bigint, bigint, string[], string, bigint, bigint],
  AnySwapOutExactTokensForNativeUnderlyingCallObject
>;

export interface AnySwapOutExactTokensForTokensCallObject {
  amountIn: bigint;
  amountOutMin: bigint;
  path: string[];
  to: string;
  deadline: bigint;
  toChainID: bigint;
}

export type AnySwapOutExactTokensForTokensCallTrace = TypedCallTrace<
  [bigint, bigint, string[], string, bigint, bigint],
  AnySwapOutExactTokensForTokensCallObject
>;

export interface AnySwapOutExactTokensForTokensUnderlyingCallObject {
  amountIn: bigint;
  amountOutMin: bigint;
  path: string[];
  to: string;
  deadline: bigint;
  toChainID: bigint;
}

export type AnySwapOutExactTokensForTokensUnderlyingCallTrace = TypedCallTrace<
  [bigint, bigint, string[], string, bigint, bigint],
  AnySwapOutExactTokensForTokensUnderlyingCallObject
>;

export interface AnySwapOutNative_address_string_uint256CallObject {
  token: string;
  to: string;
  toChainID: bigint;
}

export type AnySwapOutNative_address_string_uint256CallTrace = TypedCallTrace<
  [string, string, bigint],
  AnySwapOutNative_address_string_uint256CallObject
>;

export interface AnySwapOutNative_address_address_uint256CallObject {
  token: string;
  to: string;
  toChainID: bigint;
}

export type AnySwapOutNative_address_address_uint256CallTrace = TypedCallTrace<
  [string, string, bigint],
  AnySwapOutNative_address_address_uint256CallObject
>;

export interface AnySwapOutUnderlying_address_string_uint256_uint256CallObject {
  token: string;
  to: string;
  amount: bigint;
  toChainID: bigint;
}

export type AnySwapOutUnderlying_address_string_uint256_uint256CallTrace =
  TypedCallTrace<
    [string, string, bigint, bigint],
    AnySwapOutUnderlying_address_string_uint256_uint256CallObject
  >;

export interface AnySwapOutUnderlying_address_address_uint256_uint256CallObject {
  token: string;
  to: string;
  amount: bigint;
  toChainID: bigint;
}

export type AnySwapOutUnderlying_address_address_uint256_uint256CallTrace =
  TypedCallTrace<
    [string, string, bigint, bigint],
    AnySwapOutUnderlying_address_address_uint256_uint256CallObject
  >;

export interface ApplyMinterCallObject {
  token: string;
}

export type ApplyMinterCallTrace = TypedCallTrace<
  [string],
  ApplyMinterCallObject
>;

export interface CIDCallObject {}

export type CIDCallTrace = TypedCallTrace<[], CIDCallObject>;

export interface ChangeMPCCallObject {
  newMPC: string;
}

export type ChangeMPCCallTrace = TypedCallTrace<[string], ChangeMPCCallObject>;

export interface ChangeVaultCallObject {
  token: string;
  newVault: string;
}

export type ChangeVaultCallTrace = TypedCallTrace<
  [string, string],
  ChangeVaultCallObject
>;

export interface DepositNativeCallObject {
  token: string;
  to: string;
}

export type DepositNativeCallTrace = TypedCallTrace<
  [string, string],
  DepositNativeCallObject
>;

export interface EnableSwapTradeCallObject {}

export type EnableSwapTradeCallTrace = TypedCallTrace<
  [],
  EnableSwapTradeCallObject
>;

export interface FactoryCallObject {}

export type FactoryCallTrace = TypedCallTrace<[], FactoryCallObject>;

export interface GetAmountInCallObject {
  amountOut: bigint;
  reserveIn: bigint;
  reserveOut: bigint;
}

export type GetAmountInCallTrace = TypedCallTrace<
  [bigint, bigint, bigint],
  GetAmountInCallObject
>;

export interface GetAmountOutCallObject {
  amountIn: bigint;
  reserveIn: bigint;
  reserveOut: bigint;
}

export type GetAmountOutCallTrace = TypedCallTrace<
  [bigint, bigint, bigint],
  GetAmountOutCallObject
>;

export interface GetAmountsInCallObject {
  amountOut: bigint;
  path: string[];
}

export type GetAmountsInCallTrace = TypedCallTrace<
  [bigint, string[]],
  GetAmountsInCallObject
>;

export interface GetAmountsOutCallObject {
  amountIn: bigint;
  path: string[];
}

export type GetAmountsOutCallTrace = TypedCallTrace<
  [bigint, string[]],
  GetAmountsOutCallObject
>;

export interface MpcCallObject {}

export type MpcCallTrace = TypedCallTrace<[], MpcCallObject>;

export interface QuoteCallObject {
  amountA: bigint;
  reserveA: bigint;
  reserveB: bigint;
}

export type QuoteCallTrace = TypedCallTrace<
  [bigint, bigint, bigint],
  QuoteCallObject
>;

export interface RevokeMinterCallObject {
  token: string;
  _auth: string;
}

export type RevokeMinterCallTrace = TypedCallTrace<
  [string, string],
  RevokeMinterCallObject
>;

export interface SetEnableSwapTradeCallObject {
  enable: boolean;
}

export type SetEnableSwapTradeCallTrace = TypedCallTrace<
  [boolean],
  SetEnableSwapTradeCallObject
>;

export interface SetMinterCallObject {
  token: string;
  _auth: string;
}

export type SetMinterCallTrace = TypedCallTrace<
  [string, string],
  SetMinterCallObject
>;

export interface WNATIVECallObject {}

export type WNATIVECallTrace = TypedCallTrace<[], WNATIVECallObject>;

export interface WithdrawNativeCallObject {
  token: string;
  amount: bigint;
  to: string;
}

export type WithdrawNativeCallTrace = TypedCallTrace<
  [string, bigint, string],
  WithdrawNativeCallObject
>;

const templateContract = AnyswapRouter__factory.connect("0x0", DummyProvider);

export class AnyswapRouterContractView extends ContractView<AnyswapRouter> {
  constructor(contract: AnyswapRouter) {
    super(contract);
    this.callStatic.contract = contract;
  }

  async cID(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("cID()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async enableSwapTrade(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("enableSwapTrade()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async factory(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("factory()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction(
        "getAmountIn(uint256,uint256,uint256)",
      )(amountOut, reserveIn, reserveOut, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction(
        "getAmountOut(uint256,uint256,uint256)",
      )(amountIn, reserveIn, reserveOut, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint[]> {
    try {
      return await this.contract.getFunction("getAmountsIn(uint256,address[])")(
        amountOut,
        path,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint[]> {
    try {
      return await this.contract.getFunction(
        "getAmountsOut(uint256,address[])",
      )(amountIn, path, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async mpc(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("mpc()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("quote(uint256,uint256,uint256)")(
        amountA,
        reserveA,
        reserveB,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async wNATIVE(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("wNATIVE()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  callStatic = {
    contract: this.contract,

    async anySwapFeeTo(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapFeeTo(address,uint256)")
          .staticCall(token, amount, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_array(
      txs: BytesLike[],
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      fromChainIDs: BigNumberish[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "anySwapIn(bytes32[],address[],address[],uint256[],uint256[])",
          )
          .staticCall(txs, tokens, to, amounts, fromChainIDs, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapIn_bytes32_address_address_uint256_uint256(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapIn(bytes32,address,address,uint256,uint256)")
          .staticCall(txs, token, to, amount, fromChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapInAuto(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapInAuto(bytes32,address,address,uint256,uint256)")
          .staticCall(txs, token, to, amount, fromChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapInExactTokensForNative(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<bigint[]> {
      try {
        return await this.contract
          .getFunction(
            "anySwapInExactTokensForNative(bytes32,uint256,uint256,address[],address,uint256,uint256)",
          )
          .staticCall(
            txs,
            amountIn,
            amountOutMin,
            path,
            to,
            deadline,
            fromChainID,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapInExactTokensForTokens(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<bigint[]> {
      try {
        return await this.contract
          .getFunction(
            "anySwapInExactTokensForTokens(bytes32,uint256,uint256,address[],address,uint256,uint256)",
          )
          .staticCall(
            txs,
            amountIn,
            amountOutMin,
            path,
            to,
            deadline,
            fromChainID,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapInUnderlying(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "anySwapInUnderlying(bytes32,address,address,uint256,uint256)",
          )
          .staticCall(txs, token, to, amount, fromChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOut_address_address_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapOut(address,address,uint256,uint256)")
          .staticCall(token, to, amount, toChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOut_address_string_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapOut(address,string,uint256,uint256)")
          .staticCall(token, to, amount, toChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOut_address_array_address_array_uint256_array_uint256_array(
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      toChainIDs: BigNumberish[],
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapOut(address[],address[],uint256[],uint256[])")
          .staticCall(tokens, to, amounts, toChainIDs, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOutExactTokensForNative(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "anySwapOutExactTokensForNative(uint256,uint256,address[],address,uint256,uint256)",
          )
          .staticCall(
            amountIn,
            amountOutMin,
            path,
            to,
            deadline,
            toChainID,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOutExactTokensForNativeUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "anySwapOutExactTokensForNativeUnderlying(uint256,uint256,address[],address,uint256,uint256)",
          )
          .staticCall(
            amountIn,
            amountOutMin,
            path,
            to,
            deadline,
            toChainID,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOutExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "anySwapOutExactTokensForTokens(uint256,uint256,address[],address,uint256,uint256)",
          )
          .staticCall(
            amountIn,
            amountOutMin,
            path,
            to,
            deadline,
            toChainID,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOutExactTokensForTokensUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "anySwapOutExactTokensForTokensUnderlying(uint256,uint256,address[],address,uint256,uint256)",
          )
          .staticCall(
            amountIn,
            amountOutMin,
            path,
            to,
            deadline,
            toChainID,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOutNative_address_string_uint256(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapOutNative(address,string,uint256)")
          .staticCall(token, to, toChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOutNative_address_address_uint256(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapOutNative(address,address,uint256)")
          .staticCall(token, to, toChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOutUnderlying_address_string_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapOutUnderlying(address,string,uint256,uint256)")
          .staticCall(token, to, amount, toChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async anySwapOutUnderlying_address_address_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("anySwapOutUnderlying(address,address,uint256,uint256)")
          .staticCall(token, to, amount, toChainID, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async applyMinter(
      token: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("applyMinter(address)")
          .staticCall(token, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeMPC(
      newMPC: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<boolean> {
      try {
        return await this.contract
          .getFunction("changeMPC(address)")
          .staticCall(newMPC, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeVault(
      token: string,
      newVault: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<boolean> {
      try {
        return await this.contract
          .getFunction("changeVault(address,address)")
          .staticCall(token, newVault, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async depositNative(
      token: string,
      to: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<bigint> {
      try {
        return await this.contract
          .getFunction("depositNative(address,address)")
          .staticCall(token, to, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async revokeMinter(
      token: string,
      _auth: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("revokeMinter(address,address)")
          .staticCall(token, _auth, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setEnableSwapTrade(
      enable: boolean,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setEnableSwapTrade(bool)")
          .staticCall(enable, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setMinter(
      token: string,
      _auth: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setMinter(address,address)")
          .staticCall(token, _auth, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async withdrawNative(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<bigint> {
      try {
        return await this.contract
          .getFunction("withdrawNative(address,uint256,address)")
          .staticCall(token, amount, to, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
  };

  encodeCall = {
    anySwapFeeTo(
      token: string,
      amount: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapFeeTo",
        "function anySwapFeeTo(address,uint256)",
        [token, amount],
      );
    },
    anySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_array(
      txs: BytesLike[],
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      fromChainIDs: BigNumberish[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapIn",
        "function anySwapIn(bytes32[],address[],address[],uint256[],uint256[])",
        [txs, tokens, to, amounts, fromChainIDs],
      );
    },
    anySwapIn_bytes32_address_address_uint256_uint256(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapIn",
        "function anySwapIn(bytes32,address,address,uint256,uint256)",
        [txs, token, to, amount, fromChainID],
      );
    },
    anySwapInAuto(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapInAuto",
        "function anySwapInAuto(bytes32,address,address,uint256,uint256)",
        [txs, token, to, amount, fromChainID],
      );
    },
    anySwapInExactTokensForNative(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapInExactTokensForNative",
        "function anySwapInExactTokensForNative(bytes32,uint256,uint256,address[],address,uint256,uint256)",
        [txs, amountIn, amountOutMin, path, to, deadline, fromChainID],
      );
    },
    anySwapInExactTokensForTokens(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapInExactTokensForTokens",
        "function anySwapInExactTokensForTokens(bytes32,uint256,uint256,address[],address,uint256,uint256)",
        [txs, amountIn, amountOutMin, path, to, deadline, fromChainID],
      );
    },
    anySwapInUnderlying(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapInUnderlying",
        "function anySwapInUnderlying(bytes32,address,address,uint256,uint256)",
        [txs, token, to, amount, fromChainID],
      );
    },
    anySwapOut_address_address_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOut",
        "function anySwapOut(address,address,uint256,uint256)",
        [token, to, amount, toChainID],
      );
    },
    anySwapOut_address_string_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOut",
        "function anySwapOut(address,string,uint256,uint256)",
        [token, to, amount, toChainID],
      );
    },
    anySwapOut_address_array_address_array_uint256_array_uint256_array(
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      toChainIDs: BigNumberish[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOut",
        "function anySwapOut(address[],address[],uint256[],uint256[])",
        [tokens, to, amounts, toChainIDs],
      );
    },
    anySwapOutExactTokensForNative(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOutExactTokensForNative",
        "function anySwapOutExactTokensForNative(uint256,uint256,address[],address,uint256,uint256)",
        [amountIn, amountOutMin, path, to, deadline, toChainID],
      );
    },
    anySwapOutExactTokensForNativeUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOutExactTokensForNativeUnderlying",
        "function anySwapOutExactTokensForNativeUnderlying(uint256,uint256,address[],address,uint256,uint256)",
        [amountIn, amountOutMin, path, to, deadline, toChainID],
      );
    },
    anySwapOutExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOutExactTokensForTokens",
        "function anySwapOutExactTokensForTokens(uint256,uint256,address[],address,uint256,uint256)",
        [amountIn, amountOutMin, path, to, deadline, toChainID],
      );
    },
    anySwapOutExactTokensForTokensUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOutExactTokensForTokensUnderlying",
        "function anySwapOutExactTokensForTokensUnderlying(uint256,uint256,address[],address,uint256,uint256)",
        [amountIn, amountOutMin, path, to, deadline, toChainID],
      );
    },
    anySwapOutNative_address_string_uint256(
      token: string,
      to: string,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOutNative",
        "function anySwapOutNative(address,string,uint256)",
        [token, to, toChainID],
      );
    },
    anySwapOutNative_address_address_uint256(
      token: string,
      to: string,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOutNative",
        "function anySwapOutNative(address,address,uint256)",
        [token, to, toChainID],
      );
    },
    anySwapOutUnderlying_address_string_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOutUnderlying",
        "function anySwapOutUnderlying(address,string,uint256,uint256)",
        [token, to, amount, toChainID],
      );
    },
    anySwapOutUnderlying_address_address_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "anySwapOutUnderlying",
        "function anySwapOutUnderlying(address,address,uint256,uint256)",
        [token, to, amount, toChainID],
      );
    },
    applyMinter(token: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "applyMinter",
        "function applyMinter(address)",
        [token],
      );
    },
    cID(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "cID", "function cID()", []);
    },
    changeMPC(newMPC: string, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "changeMPC",
        "function changeMPC(address)",
        [newMPC],
      );
    },
    changeVault(
      token: string,
      newVault: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "changeVault",
        "function changeVault(address,address)",
        [token, newVault],
      );
    },
    depositNative(
      token: string,
      to: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "depositNative",
        "function depositNative(address,address)",
        [token, to],
      );
    },
    enableSwapTrade(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "enableSwapTrade",
        "function enableSwapTrade()",
        [],
      );
    },
    factory(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "factory", "function factory()", []);
    },
    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getAmountIn",
        "function getAmountIn(uint256,uint256,uint256)",
        [amountOut, reserveIn, reserveOut],
      );
    },
    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getAmountOut",
        "function getAmountOut(uint256,uint256,uint256)",
        [amountIn, reserveIn, reserveOut],
      );
    },
    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getAmountsIn",
        "function getAmountsIn(uint256,address[])",
        [amountOut, path],
      );
    },
    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "getAmountsOut",
        "function getAmountsOut(uint256,address[])",
        [amountIn, path],
      );
    },
    mpc(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "mpc", "function mpc()", []);
    },
    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "quote",
        "function quote(uint256,uint256,uint256)",
        [amountA, reserveA, reserveB],
      );
    },
    revokeMinter(
      token: string,
      _auth: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "revokeMinter",
        "function revokeMinter(address,address)",
        [token, _auth],
      );
    },
    setEnableSwapTrade(
      enable: boolean,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "setEnableSwapTrade",
        "function setEnableSwapTrade(bool)",
        [enable],
      );
    },
    setMinter(
      token: string,
      _auth: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "setMinter",
        "function setMinter(address,address)",
        [token, _auth],
      );
    },
    wNATIVE(callContext: EthCallContext): EthCallParam {
      return encodeCallData(callContext, "wNATIVE", "function wNATIVE()", []);
    },
    withdrawNative(
      token: string,
      amount: BigNumberish,
      to: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "withdrawNative",
        "function withdrawNative(address,uint256,address)",
        [token, amount, to],
      );
    },
  };
}

export class AnyswapRouterBoundContractView extends BoundContractView<
  AnyswapRouter,
  AnyswapRouterContractView
> {
  async cID(overrides?: Overrides): Promise<bigint> {
    return await this.view.cID(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async enableSwapTrade(overrides?: Overrides): Promise<boolean> {
    return await this.view.enableSwapTrade(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async factory(overrides?: Overrides): Promise<string> {
    return await this.view.factory(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.getAmountIn(
      amountOut,
      reserveIn,
      reserveOut,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.getAmountOut(
      amountIn,
      reserveIn,
      reserveOut,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: Overrides,
  ): Promise<bigint[]> {
    return await this.view.getAmountsIn(
      amountOut,
      path,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: Overrides,
  ): Promise<bigint[]> {
    return await this.view.getAmountsOut(
      amountIn,
      path,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async mpc(overrides?: Overrides): Promise<string> {
    return await this.view.mpc(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view.quote(
      amountA,
      reserveA,
      reserveB,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async wNATIVE(overrides?: Overrides): Promise<string> {
    return await this.view.wNATIVE(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  callStatic = {
    view: this.view,
    context: this.context,

    async anySwapFeeTo(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapFeeTo(
        token,
        amount,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_array(
      txs: BytesLike[],
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      fromChainIDs: BigNumberish[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_array(
        txs,
        tokens,
        to,
        amounts,
        fromChainIDs,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapIn_bytes32_address_address_uint256_uint256(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapIn_bytes32_address_address_uint256_uint256(
        txs,
        token,
        to,
        amount,
        fromChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapInAuto(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapInAuto(
        txs,
        token,
        to,
        amount,
        fromChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapInExactTokensForNative(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<bigint[]> {
      return await this.view.callStatic.anySwapInExactTokensForNative(
        txs,
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        fromChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapInExactTokensForTokens(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<bigint[]> {
      return await this.view.callStatic.anySwapInExactTokensForTokens(
        txs,
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        fromChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapInUnderlying(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapInUnderlying(
        txs,
        token,
        to,
        amount,
        fromChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOut_address_address_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOut_address_address_uint256_uint256(
        token,
        to,
        amount,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOut_address_string_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOut_address_string_uint256_uint256(
        token,
        to,
        amount,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOut_address_array_address_array_uint256_array_uint256_array(
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      toChainIDs: BigNumberish[],
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOut_address_array_address_array_uint256_array_uint256_array(
        tokens,
        to,
        amounts,
        toChainIDs,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOutExactTokensForNative(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOutExactTokensForNative(
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOutExactTokensForNativeUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOutExactTokensForNativeUnderlying(
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOutExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOutExactTokensForTokens(
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOutExactTokensForTokensUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOutExactTokensForTokensUnderlying(
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOutNative_address_string_uint256(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOutNative_address_string_uint256(
        token,
        to,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOutNative_address_address_uint256(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOutNative_address_address_uint256(
        token,
        to,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOutUnderlying_address_string_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOutUnderlying_address_string_uint256_uint256(
        token,
        to,
        amount,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async anySwapOutUnderlying_address_address_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.anySwapOutUnderlying_address_address_uint256_uint256(
        token,
        to,
        amount,
        toChainID,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async applyMinter(token: string, overrides?: Overrides): Promise<void> {
      return await this.view.callStatic.applyMinter(
        token,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeMPC(newMPC: string, overrides?: Overrides): Promise<boolean> {
      return await this.view.callStatic.changeMPC(
        newMPC,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeVault(
      token: string,
      newVault: string,
      overrides?: Overrides,
    ): Promise<boolean> {
      return await this.view.callStatic.changeVault(
        token,
        newVault,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async depositNative(
      token: string,
      to: string,
      overrides?: Overrides,
    ): Promise<bigint> {
      return await this.view.callStatic.depositNative(
        token,
        to,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async revokeMinter(
      token: string,
      _auth: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.revokeMinter(
        token,
        _auth,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setEnableSwapTrade(
      enable: boolean,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.setEnableSwapTrade(
        enable,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setMinter(
      token: string,
      _auth: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.setMinter(
        token,
        _auth,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async withdrawNative(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
    ): Promise<bigint> {
      return await this.view.callStatic.withdrawNative(
        token,
        amount,
        to,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
  };

  encodeCall = {
    view: this.view,
    context: this.context,

    anySwapFeeTo(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapFeeTo(token, amount, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    anySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_array(
      txs: BytesLike[],
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      fromChainIDs: BigNumberish[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_array(
        txs,
        tokens,
        to,
        amounts,
        fromChainIDs,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapIn_bytes32_address_address_uint256_uint256(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapIn_bytes32_address_address_uint256_uint256(
        txs,
        token,
        to,
        amount,
        fromChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapInAuto(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapInAuto(
        txs,
        token,
        to,
        amount,
        fromChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapInExactTokensForNative(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapInExactTokensForNative(
        txs,
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        fromChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapInExactTokensForTokens(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapInExactTokensForTokens(
        txs,
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        fromChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapInUnderlying(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapInUnderlying(
        txs,
        token,
        to,
        amount,
        fromChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOut_address_address_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOut_address_address_uint256_uint256(
        token,
        to,
        amount,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOut_address_string_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOut_address_string_uint256_uint256(
        token,
        to,
        amount,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOut_address_array_address_array_uint256_array_uint256_array(
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      toChainIDs: BigNumberish[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOut_address_array_address_array_uint256_array_uint256_array(
        tokens,
        to,
        amounts,
        toChainIDs,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOutExactTokensForNative(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOutExactTokensForNative(
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOutExactTokensForNativeUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOutExactTokensForNativeUnderlying(
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOutExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOutExactTokensForTokens(
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOutExactTokensForTokensUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOutExactTokensForTokensUnderlying(
        amountIn,
        amountOutMin,
        path,
        to,
        deadline,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOutNative_address_string_uint256(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOutNative_address_string_uint256(
        token,
        to,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOutNative_address_address_uint256(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOutNative_address_address_uint256(
        token,
        to,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOutUnderlying_address_string_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOutUnderlying_address_string_uint256_uint256(
        token,
        to,
        amount,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    anySwapOutUnderlying_address_address_uint256_uint256(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.anySwapOutUnderlying_address_address_uint256_uint256(
        token,
        to,
        amount,
        toChainID,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    applyMinter(token: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.applyMinter(token, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    cID(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.cID({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    changeMPC(newMPC: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.changeMPC(newMPC, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    changeVault(
      token: string,
      newVault: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.changeVault(token, newVault, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    depositNative(
      token: string,
      to: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.depositNative(token, to, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    enableSwapTrade(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.enableSwapTrade({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    factory(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.factory({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.getAmountIn(
        amountOut,
        reserveIn,
        reserveOut,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.getAmountOut(
        amountIn,
        reserveIn,
        reserveOut,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.getAmountsIn(amountOut, path, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.getAmountsOut(amountIn, path, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    mpc(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.mpc({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.quote(amountA, reserveA, reserveB, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    revokeMinter(
      token: string,
      _auth: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.revokeMinter(token, _auth, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setEnableSwapTrade(enable: boolean, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.setEnableSwapTrade(enable, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setMinter(
      token: string,
      _auth: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.setMinter(token, _auth, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    wNATIVE(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.wNATIVE({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    withdrawNative(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.withdrawNative(token, amount, to, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
  };
}

export type AnyswapRouterContext = ContractContext<
  AnyswapRouter,
  AnyswapRouterBoundContractView
>;

export class AnyswapRouterProcessor extends BaseProcessor<
  AnyswapRouter,
  AnyswapRouterBoundContractView
> {
  onEventLogAnySwapIn(
    handler: (event: LogAnySwapInEvent, ctx: AnyswapRouterContext) => void,
    filter?: LogAnySwapInEventFilter | LogAnySwapInEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapInEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapIn(bytes32,address,address,uint256,uint256,uint256)"
      ](null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogAnySwapOut_address_address_address_uint256_uint256_uint256(
    handler: (
      event: LogAnySwapOut_address_address_address_uint256_uint256_uint256_Event,
      ctx: AnyswapRouterContext,
    ) => void,
    filter?:
      | LogAnySwapOut_address_address_address_uint256_uint256_uint256_EventFilter
      | LogAnySwapOut_address_address_address_uint256_uint256_uint256_EventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapOut_address_address_address_uint256_uint256_uint256_Event,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapOut(address,address,address,uint256,uint256,uint256)"
      ](null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogAnySwapOut_address_address_string_uint256_uint256_uint256(
    handler: (
      event: LogAnySwapOut_address_address_string_uint256_uint256_uint256_Event,
      ctx: AnyswapRouterContext,
    ) => void,
    filter?:
      | LogAnySwapOut_address_address_string_uint256_uint256_uint256_EventFilter
      | LogAnySwapOut_address_address_string_uint256_uint256_uint256_EventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapOut_address_address_string_uint256_uint256_uint256_Event,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapOut(address,address,string,uint256,uint256,uint256)"
      ](null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogAnySwapTradeTokensForNative(
    handler: (
      event: LogAnySwapTradeTokensForNativeEvent,
      ctx: AnyswapRouterContext,
    ) => void,
    filter?:
      | LogAnySwapTradeTokensForNativeEventFilter
      | LogAnySwapTradeTokensForNativeEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapTradeTokensForNativeEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapTradeTokensForNative(address[],address,address,uint256,uint256,uint256,uint256)"
      ](null, null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogAnySwapTradeTokensForTokens(
    handler: (
      event: LogAnySwapTradeTokensForTokensEvent,
      ctx: AnyswapRouterContext,
    ) => void,
    filter?:
      | LogAnySwapTradeTokensForTokensEventFilter
      | LogAnySwapTradeTokensForTokensEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapTradeTokensForTokensEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapTradeTokensForTokens(address[],address,address,uint256,uint256,uint256,uint256)"
      ](null, null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogChangeMPC(
    handler: (event: LogChangeMPCEvent, ctx: AnyswapRouterContext) => void,
    filter?: LogChangeMPCEventFilter | LogChangeMPCEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogChangeMPCEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogChangeMPC(address,address,uint256,uint256)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogChangeRouter(
    handler: (event: LogChangeRouterEvent, ctx: AnyswapRouterContext) => void,
    filter?: LogChangeRouterEventFilter | LogChangeRouterEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogChangeRouterEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogChangeRouter(address,address,uint256)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onCallAnySwapFeeTo(
    handler: (call: AnySwapFeeToCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapFeeToCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x87cc6e2f",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_array(
    handler: (
      call: AnySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_arrayCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapIn_bytes32_array_address_array_address_array_uint256_array_uint256_arrayCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x25121b76",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapIn_bytes32_address_address_uint256_uint256(
    handler: (
      call: AnySwapIn_bytes32_address_address_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapIn_bytes32_address_address_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x825bb13c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapInAuto(
    handler: (call: AnySwapInAutoCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapInAutoCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x0175b1c4",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapInExactTokensForNative(
    handler: (
      call: AnySwapInExactTokensForNativeCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapInExactTokensForNativeCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x52a397d5",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapInExactTokensForTokens(
    handler: (
      call: AnySwapInExactTokensForTokensCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapInExactTokensForTokensCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x2fc1e728",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapInUnderlying(
    handler: (
      call: AnySwapInUnderlyingCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapInUnderlyingCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3f88de89",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOut_address_address_uint256_uint256(
    handler: (
      call: AnySwapOut_address_address_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOut_address_address_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x241dc2df",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOut_address_string_uint256_uint256(
    handler: (
      call: AnySwapOut_address_string_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOut_address_string_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xc604b0b8",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOut_address_array_address_array_uint256_array_uint256_array(
    handler: (
      call: AnySwapOut_address_array_address_array_uint256_array_uint256_arrayCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOut_address_array_address_array_uint256_array_uint256_arrayCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xdcfb77b1",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOutExactTokensForNative(
    handler: (
      call: AnySwapOutExactTokensForNativeCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOutExactTokensForNativeCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x65782f56",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOutExactTokensForNativeUnderlying(
    handler: (
      call: AnySwapOutExactTokensForNativeUnderlyingCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOutExactTokensForNativeUnderlyingCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x6a453972",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOutExactTokensForTokens(
    handler: (
      call: AnySwapOutExactTokensForTokensCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOutExactTokensForTokensCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x0bb57203",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOutExactTokensForTokensUnderlying(
    handler: (
      call: AnySwapOutExactTokensForTokensUnderlyingCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOutExactTokensForTokensUnderlyingCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xd8b9f610",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOutNative_address_string_uint256(
    handler: (
      call: AnySwapOutNative_address_string_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOutNative_address_string_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x540dd52c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOutNative_address_address_uint256(
    handler: (
      call: AnySwapOutNative_address_address_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOutNative_address_address_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa5e56571",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOutUnderlying_address_string_uint256_uint256(
    handler: (
      call: AnySwapOutUnderlying_address_string_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOutUnderlying_address_string_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x049b4e7e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAnySwapOutUnderlying_address_address_uint256_uint256(
    handler: (
      call: AnySwapOutUnderlying_address_address_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AnySwapOutUnderlying_address_address_uint256_uint256CallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xedbdf5e2",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallApplyMinter(
    handler: (call: ApplyMinterCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ApplyMinterCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xd9e35bb2",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallCID(
    handler: (call: CIDCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: CIDCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x99a2f2d7",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeMPC(
    handler: (call: ChangeMPCCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeMPCCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x5b7b018c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeVault(
    handler: (call: ChangeVaultCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeVaultCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x456862aa",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallDepositNative(
    handler: (call: DepositNativeCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: DepositNativeCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x701bb891",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallEnableSwapTrade(
    handler: (
      call: EnableSwapTradeCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: EnableSwapTradeCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x353cb3a8",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallFactory(
    handler: (call: FactoryCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: FactoryCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xc45a0155",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetAmountIn(
    handler: (call: GetAmountInCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetAmountInCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x85f8c259",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetAmountOut(
    handler: (call: GetAmountOutCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetAmountOutCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x054d50d4",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetAmountsIn(
    handler: (call: GetAmountsInCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetAmountsInCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x1f00ca74",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetAmountsOut(
    handler: (call: GetAmountsOutCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetAmountsOutCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xd06ca61f",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallMpc(
    handler: (call: MpcCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: MpcCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf75c2664",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallQuote(
    handler: (call: QuoteCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: QuoteCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xad615dec",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRevokeMinter(
    handler: (call: RevokeMinterCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RevokeMinterCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x87bafe5f",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetEnableSwapTrade(
    handler: (
      call: SetEnableSwapTradeCallTrace,
      ctx: AnyswapRouterContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetEnableSwapTradeCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x085c6d5e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetMinter(
    handler: (call: SetMinterCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetMinterCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9f122d6c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallWNATIVE(
    handler: (call: WNATIVECallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: WNATIVECallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x8fd903f5",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallWithdrawNative(
    handler: (call: WithdrawNativeCallTrace, ctx: AnyswapRouterContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: WithdrawNativeCallTrace,
      ctx: AnyswapRouterContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x832e9492",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  public static filters = {
    LogAnySwapIn(
      txhash?: BytesLike | null,
      token?: string | null,
      to?: string | null,
      amount?: null,
      fromChainID?: null,
      toChainID?: null,
    ): LogAnySwapInEventFilter {
      return templateContract.filters[
        "LogAnySwapIn(bytes32,address,address,uint256,uint256,uint256)"
      ](txhash, token, to, amount, fromChainID, toChainID);
    },
    LogAnySwapOut_address_address_address_uint256_uint256_uint256_(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      fromChainID?: null,
      toChainID?: null,
    ): LogAnySwapOut_address_address_address_uint256_uint256_uint256_EventFilter {
      return templateContract.filters[
        "LogAnySwapOut(address,address,address,uint256,uint256,uint256)"
      ](token, from, to, amount, fromChainID, toChainID);
    },
    LogAnySwapOut_address_address_string_uint256_uint256_uint256_(
      token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      fromChainID?: null,
      toChainID?: null,
    ): LogAnySwapOut_address_address_string_uint256_uint256_uint256_EventFilter {
      return templateContract.filters[
        "LogAnySwapOut(address,address,string,uint256,uint256,uint256)"
      ](token, from, to, amount, fromChainID, toChainID);
    },
    LogAnySwapTradeTokensForNative(
      path?: null,
      from?: string | null,
      to?: string | null,
      amountIn?: null,
      amountOutMin?: null,
      fromChainID?: null,
      toChainID?: null,
    ): LogAnySwapTradeTokensForNativeEventFilter {
      return templateContract.filters[
        "LogAnySwapTradeTokensForNative(address[],address,address,uint256,uint256,uint256,uint256)"
      ](path, from, to, amountIn, amountOutMin, fromChainID, toChainID);
    },
    LogAnySwapTradeTokensForTokens(
      path?: null,
      from?: string | null,
      to?: string | null,
      amountIn?: null,
      amountOutMin?: null,
      fromChainID?: null,
      toChainID?: null,
    ): LogAnySwapTradeTokensForTokensEventFilter {
      return templateContract.filters[
        "LogAnySwapTradeTokensForTokens(address[],address,address,uint256,uint256,uint256,uint256)"
      ](path, from, to, amountIn, amountOutMin, fromChainID, toChainID);
    },
    LogChangeMPC(
      oldMPC?: string | null,
      newMPC?: string | null,
      effectiveTime?: BigNumberish | null,
      chainID?: null,
    ): LogChangeMPCEventFilter {
      return templateContract.filters[
        "LogChangeMPC(address,address,uint256,uint256)"
      ](oldMPC, newMPC, effectiveTime, chainID);
    },
    LogChangeRouter(
      oldRouter?: string | null,
      newRouter?: string | null,
      chainID?: null,
    ): LogChangeRouterEventFilter {
      return templateContract.filters[
        "LogChangeRouter(address,address,uint256)"
      ](oldRouter, newRouter, chainID);
    },
  };

  protected CreateBoundContractView(): AnyswapRouterBoundContractView {
    const view = getAnyswapRouterContract(
      this.config.network,
      this.config.address,
    );
    return new AnyswapRouterBoundContractView(this.config.address, view);
  }

  public static bind(options: BindOptions): AnyswapRouterProcessor {
    if (!options.name) {
      options.name = "AnyswapRouter";
    }
    let processor = getProcessor(options) as AnyswapRouterProcessor;
    if (!processor) {
      processor = new AnyswapRouterProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }
}

export class AnyswapRouterProcessorTemplate extends BaseProcessorTemplate<
  AnyswapRouter,
  AnyswapRouterBoundContractView
> {
  bindInternal(options: BindOptions) {
    if (!options.name) {
      options.name = "AnyswapRouter";
    }
    let processor = getProcessor(options) as AnyswapRouterProcessor;
    if (!processor) {
      processor = new AnyswapRouterProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }

  onEventLogAnySwapIn(
    handler: (event: LogAnySwapInEvent, ctx: AnyswapRouterContext) => void,
    filter?: LogAnySwapInEventFilter | LogAnySwapInEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapInEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapIn(bytes32,address,address,uint256,uint256,uint256)"
      ](null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogAnySwapOut_address_address_address_uint256_uint256_uint256(
    handler: (
      event: LogAnySwapOut_address_address_address_uint256_uint256_uint256_Event,
      ctx: AnyswapRouterContext,
    ) => void,
    filter?:
      | LogAnySwapOut_address_address_address_uint256_uint256_uint256_EventFilter
      | LogAnySwapOut_address_address_address_uint256_uint256_uint256_EventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapOut_address_address_address_uint256_uint256_uint256_Event,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapOut(address,address,address,uint256,uint256,uint256)"
      ](null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogAnySwapOut_address_address_string_uint256_uint256_uint256(
    handler: (
      event: LogAnySwapOut_address_address_string_uint256_uint256_uint256_Event,
      ctx: AnyswapRouterContext,
    ) => void,
    filter?:
      | LogAnySwapOut_address_address_string_uint256_uint256_uint256_EventFilter
      | LogAnySwapOut_address_address_string_uint256_uint256_uint256_EventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapOut_address_address_string_uint256_uint256_uint256_Event,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapOut(address,address,string,uint256,uint256,uint256)"
      ](null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogAnySwapTradeTokensForNative(
    handler: (
      event: LogAnySwapTradeTokensForNativeEvent,
      ctx: AnyswapRouterContext,
    ) => void,
    filter?:
      | LogAnySwapTradeTokensForNativeEventFilter
      | LogAnySwapTradeTokensForNativeEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapTradeTokensForNativeEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapTradeTokensForNative(address[],address,address,uint256,uint256,uint256,uint256)"
      ](null, null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogAnySwapTradeTokensForTokens(
    handler: (
      event: LogAnySwapTradeTokensForTokensEvent,
      ctx: AnyswapRouterContext,
    ) => void,
    filter?:
      | LogAnySwapTradeTokensForTokensEventFilter
      | LogAnySwapTradeTokensForTokensEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogAnySwapTradeTokensForTokensEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogAnySwapTradeTokensForTokens(address[],address,address,uint256,uint256,uint256,uint256)"
      ](null, null, null, null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogChangeMPC(
    handler: (event: LogChangeMPCEvent, ctx: AnyswapRouterContext) => void,
    filter?: LogChangeMPCEventFilter | LogChangeMPCEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogChangeMPCEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogChangeMPC(address,address,uint256,uint256)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventLogChangeRouter(
    handler: (event: LogChangeRouterEvent, ctx: AnyswapRouterContext) => void,
    filter?: LogChangeRouterEventFilter | LogChangeRouterEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: LogChangeRouterEvent,
      ctx: AnyswapRouterContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "LogChangeRouter(address,address,uint256)"
      ](null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }
}

export function getAnyswapRouterContract(
  chainId: EthChainId,
  address: string,
): AnyswapRouterContractView {
  let contract = getContractByABI(
    "AnyswapRouter",
    address,
    chainId,
  ) as AnyswapRouterContractView;
  if (!contract) {
    const rawContract = AnyswapRouter__factory.connect(
      address,
      getProvider(chainId as any),
    );
    contract = new AnyswapRouterContractView(rawContract);
    addContractByABI("AnyswapRouter", address, chainId, contract);
  }
  return contract;
}

export function getAnyswapRouterContractOnContext(
  context: EthContext,
  address: string,
): AnyswapRouterBoundContractView {
  const view = getAnyswapRouterContract(context.getChainId(), address);
  const boundView = new AnyswapRouterBoundContractView(address, view);
  boundView.context = context;
  if (boundView.callStatic) {
    boundView.callStatic.context = context;
  }
  return boundView;
}
