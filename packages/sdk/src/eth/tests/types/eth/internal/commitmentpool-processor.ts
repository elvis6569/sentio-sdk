/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish, Overrides, BytesLike } from "ethers";
import {
  addContractByABI,
  getContractByABI,
  addProcessor,
  getProcessor,
  getProvider,
  transformEtherError,
  BindOptions,
  BaseProcessor,
  BaseProcessorTemplate,
  BoundContractView,
  ContractContext,
  ContractView,
  DummyProvider,
  EthChainId,
  TypedCallTrace,
  EthContext,
  EthFetchConfig,
  PreprocessResult,
  encodeCallData,
} from "@sentio/sdk/eth";
import { EthCallParam, EthCallContext, PreparedData } from "@sentio/protos";

import { CommitmentPool__factory } from "./index.js";
import {
  CommitmentPool,
  CommitmentIncludedEvent,
  CommitmentIncludedEventFilter,
  CommitmentQueuedEvent,
  CommitmentQueuedEventFilter,
  CommitmentSpentEvent,
  CommitmentSpentEventFilter,
  RollupWhitelistDisabledEvent,
  RollupWhitelistDisabledEventFilter,
  SanctionsCheckDisabledEvent,
  SanctionsCheckDisabledEventFilter,
  SanctionsListEvent,
  SanctionsListEventFilter,
  VerifierUpdateDisabledEvent,
  VerifierUpdateDisabledEventFilter,
  ICommitmentPool,
} from "./CommitmentPool.js";

export interface _pathIndicesCallObject {
  _fullPath: bigint;
  _rollupSize: bigint;
}

export type _pathIndicesCallTrace = TypedCallTrace<
  [bigint, bigint],
  _pathIndicesCallObject
>;

export interface AddEnqueueWhitelistCallObject {
  _actor: string;
}

export type AddEnqueueWhitelistCallTrace = TypedCallTrace<
  [string],
  AddEnqueueWhitelistCallObject
>;

export interface AddRollupWhitelistCallObject {
  _roller: string;
}

export type AddRollupWhitelistCallTrace = TypedCallTrace<
  [string],
  AddRollupWhitelistCallObject
>;

export interface AssetTypeCallObject {}

export type AssetTypeCallTrace = TypedCallTrace<[], AssetTypeCallObject>;

export interface C_42ae54c0CallObject {
  c__42ae54c0: string;
}

export type C_42ae54c0CallTrace = TypedCallTrace<
  [string],
  C_42ae54c0CallObject
>;

export interface C_9f3d2211CallObject {
  c__9f3d2211: string;
}

export type C_9f3d2211CallTrace = TypedCallTrace<
  [string],
  C_9f3d2211CallObject
>;

export interface C_bfaab06fCallObject {
  c__bfaab06f: string;
}

export type C_bfaab06fCallTrace = TypedCallTrace<
  [string],
  C_bfaab06fCallObject
>;

export interface C_false42ae54c0CallObject {
  c__42ae54c0: string;
}

export type C_false42ae54c0CallTrace = TypedCallTrace<
  [string],
  C_false42ae54c0CallObject
>;

export interface C_false9f3d2211CallObject {
  c__9f3d2211: string;
}

export type C_false9f3d2211CallTrace = TypedCallTrace<
  [string],
  C_false9f3d2211CallObject
>;

export interface C_falsebfaab06fCallObject {
  c__bfaab06f: string;
}

export type C_falsebfaab06fCallTrace = TypedCallTrace<
  [string],
  C_falsebfaab06fCallObject
>;

export interface C_true42ae54c0CallObject {
  c__42ae54c0: string;
}

export type C_true42ae54c0CallTrace = TypedCallTrace<
  [string],
  C_true42ae54c0CallObject
>;

export interface C_true9f3d2211CallObject {
  c__9f3d2211: string;
}

export type C_true9f3d2211CallTrace = TypedCallTrace<
  [string],
  C_true9f3d2211CallObject
>;

export interface C_truebfaab06fCallObject {
  c__bfaab06f: string;
}

export type C_truebfaab06fCallTrace = TypedCallTrace<
  [string],
  C_truebfaab06fCallObject
>;

export interface ChangeOperatorCallObject {
  _newOperator: string;
}

export type ChangeOperatorCallTrace = TypedCallTrace<
  [string],
  ChangeOperatorCallObject
>;

export interface DisableRollupVerifierCallObject {
  _rollupSize: bigint;
}

export type DisableRollupVerifierCallTrace = TypedCallTrace<
  [bigint],
  DisableRollupVerifierCallObject
>;

export interface DisableTransactVerifierCallObject {
  _numInputs: bigint;
  _numOutputs: bigint;
}

export type DisableTransactVerifierCallTrace = TypedCallTrace<
  [bigint, bigint],
  DisableTransactVerifierCallObject
>;

export interface EnableRollupVerifierCallObject {
  _rollupSize: bigint;
  _rollupVerifier: string;
}

export type EnableRollupVerifierCallTrace = TypedCallTrace<
  [bigint, string],
  EnableRollupVerifierCallObject
>;

export interface EnableTransactVerifierCallObject {
  _numInputs: bigint;
  _numOutputs: bigint;
  _transactVerifier: string;
}

export type EnableTransactVerifierCallTrace = TypedCallTrace<
  [bigint, bigint, string],
  EnableTransactVerifierCallObject
>;

export interface EnqueueCallObject {
  _request: ICommitmentPool.CommitmentRequestStructOutput;
  _executor: string;
}

export type EnqueueCallTrace = TypedCallTrace<
  [ICommitmentPool.CommitmentRequestStructOutput, string],
  EnqueueCallObject
>;

export interface GetCommitmentIncludedCountCallObject {}

export type GetCommitmentIncludedCountCallTrace = TypedCallTrace<
  [],
  GetCommitmentIncludedCountCallObject
>;

export interface GetMinRollupFeeCallObject {}

export type GetMinRollupFeeCallTrace = TypedCallTrace<
  [],
  GetMinRollupFeeCallObject
>;

export interface GetTreeCapacityCallObject {}

export type GetTreeCapacityCallTrace = TypedCallTrace<
  [],
  GetTreeCapacityCallObject
>;

export interface IsHistoricCommitmentCallObject {
  _commitment: bigint;
}

export type IsHistoricCommitmentCallTrace = TypedCallTrace<
  [bigint],
  IsHistoricCommitmentCallObject
>;

export interface IsKnownRootCallObject {
  root: bigint;
}

export type IsKnownRootCallTrace = TypedCallTrace<
  [bigint],
  IsKnownRootCallObject
>;

export interface IsRollupWhitelistDisabledCallObject {}

export type IsRollupWhitelistDisabledCallTrace = TypedCallTrace<
  [],
  IsRollupWhitelistDisabledCallObject
>;

export interface IsSpentSerialNumberCallObject {
  _serialNumber: bigint;
}

export type IsSpentSerialNumberCallTrace = TypedCallTrace<
  [bigint],
  IsSpentSerialNumberCallObject
>;

export interface IsVerifierUpdateDisabledCallObject {}

export type IsVerifierUpdateDisabledCallTrace = TypedCallTrace<
  [],
  IsVerifierUpdateDisabledCallObject
>;

export interface RemoveEnqueueWhitelistCallObject {
  _actor: string;
}

export type RemoveEnqueueWhitelistCallTrace = TypedCallTrace<
  [string],
  RemoveEnqueueWhitelistCallObject
>;

export interface RemoveRollupWhitelistCallObject {
  _roller: string;
}

export type RemoveRollupWhitelistCallTrace = TypedCallTrace<
  [string],
  RemoveRollupWhitelistCallObject
>;

export interface RollupCallObject {
  _request: ICommitmentPool.RollupRequestStructOutput;
}

export type RollupCallTrace = TypedCallTrace<
  [ICommitmentPool.RollupRequestStructOutput],
  RollupCallObject
>;

export interface SanctionsCheckDisabledCallObject {}

export type SanctionsCheckDisabledCallTrace = TypedCallTrace<
  [],
  SanctionsCheckDisabledCallObject
>;

export interface SanctionsListCallObject {}

export type SanctionsListCallTrace = TypedCallTrace<
  [],
  SanctionsListCallObject
>;

export interface SetMinRollupFeeCallObject {
  _minRollupFee: bigint;
}

export type SetMinRollupFeeCallTrace = TypedCallTrace<
  [bigint],
  SetMinRollupFeeCallObject
>;

export interface SetRollupWhitelistDisabledCallObject {
  _state: boolean;
}

export type SetRollupWhitelistDisabledCallTrace = TypedCallTrace<
  [boolean],
  SetRollupWhitelistDisabledCallObject
>;

export interface SetSanctionCheckDisabledCallObject {
  _state: boolean;
}

export type SetSanctionCheckDisabledCallTrace = TypedCallTrace<
  [boolean],
  SetSanctionCheckDisabledCallObject
>;

export interface SetVerifierUpdateDisabledCallObject {
  _state: boolean;
}

export type SetVerifierUpdateDisabledCallTrace = TypedCallTrace<
  [boolean],
  SetVerifierUpdateDisabledCallObject
>;

export interface TransactCallObject {
  _request: ICommitmentPool.TransactRequestStructOutput;
  _signature: string;
}

export type TransactCallTrace = TypedCallTrace<
  [ICommitmentPool.TransactRequestStructOutput, string],
  TransactCallObject
>;

export interface UpdateSanctionsListAddressCallObject {
  _sanction: string;
}

export type UpdateSanctionsListAddressCallTrace = TypedCallTrace<
  [string],
  UpdateSanctionsListAddressCallObject
>;

const templateContract = CommitmentPool__factory.connect("0x0", DummyProvider);

export class CommitmentPoolContractView extends ContractView<CommitmentPool> {
  constructor(contract: CommitmentPool) {
    super(contract);
    this.callStatic.contract = contract;
  }

  async _pathIndices(
    _fullPath: BigNumberish,
    _rollupSize: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("_pathIndices(uint256,uint32)")(
        _fullPath,
        _rollupSize,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async assetType(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("assetType()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_42ae54c0(
    c__42ae54c0: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<void> {
    try {
      return await this.contract.getFunction("c_42ae54c0(bytes8)")(
        c__42ae54c0,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_9f3d2211(
    c__9f3d2211: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<void> {
    try {
      return await this.contract.getFunction("c_9f3d2211(bytes8)")(
        c__9f3d2211,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_bfaab06f(
    c__bfaab06f: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<void> {
    try {
      return await this.contract.getFunction("c_bfaab06f(bytes8)")(
        c__bfaab06f,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_false42ae54c0(
    c__42ae54c0: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("c_false42ae54c0(bytes8)")(
        c__42ae54c0,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_false9f3d2211(
    c__9f3d2211: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("c_false9f3d2211(bytes8)")(
        c__9f3d2211,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_falsebfaab06f(
    c__bfaab06f: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("c_falsebfaab06f(bytes8)")(
        c__bfaab06f,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_true42ae54c0(
    c__42ae54c0: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("c_true42ae54c0(bytes8)")(
        c__42ae54c0,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_true9f3d2211(
    c__9f3d2211: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("c_true9f3d2211(bytes8)")(
        c__9f3d2211,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async c_truebfaab06f(
    c__bfaab06f: BytesLike,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("c_truebfaab06f(bytes8)")(
        c__bfaab06f,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getCommitmentIncludedCount(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getCommitmentIncludedCount()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getMinRollupFee(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getMinRollupFee()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async getTreeCapacity(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<bigint> {
    try {
      return await this.contract.getFunction("getTreeCapacity()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isHistoricCommitment(
    _commitment: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("isHistoricCommitment(uint256)")(
        _commitment,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isKnownRoot(
    root: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("isKnownRoot(uint256)")(
        root,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isRollupWhitelistDisabled(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("isRollupWhitelistDisabled()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isSpentSerialNumber(
    _serialNumber: BigNumberish,
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("isSpentSerialNumber(uint256)")(
        _serialNumber,
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async isVerifierUpdateDisabled(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("isVerifierUpdateDisabled()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async sanctionsCheckDisabled(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<boolean> {
    try {
      return await this.contract.getFunction("sanctionsCheckDisabled()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  async sanctionsList(
    overrides?: Overrides,
    preparedData?: PreparedData,
    ethCallContext?: EthCallContext,
  ): Promise<string> {
    try {
      return await this.contract.getFunction("sanctionsList()")(
        overrides || {},
      );
    } catch (e) {
      const stack = new Error().stack;
      throw transformEtherError(e, undefined, stack);
    }
  }

  callStatic = {
    contract: this.contract,

    async addEnqueueWhitelist(
      _actor: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("addEnqueueWhitelist(address)")
          .staticCall(_actor, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async addRollupWhitelist(
      _roller: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("addRollupWhitelist(address)")
          .staticCall(_roller, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async changeOperator(
      _newOperator: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("changeOperator(address)")
          .staticCall(_newOperator, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("disableRollupVerifier(uint32)")
          .staticCall(_rollupSize, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("disableTransactVerifier(uint32,uint32)")
          .staticCall(_numInputs, _numOutputs, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async enableRollupVerifier(
      _rollupSize: BigNumberish,
      _rollupVerifier: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("enableRollupVerifier(uint32,address)")
          .staticCall(_rollupSize, _rollupVerifier, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      _transactVerifier: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("enableTransactVerifier(uint32,uint32,address)")
          .staticCall(
            _numInputs,
            _numOutputs,
            _transactVerifier,
            overrides || {},
          );
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async enqueue(
      _request: ICommitmentPool.CommitmentRequestStruct,
      _executor: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "enqueue((uint256,uint256,uint256,uint256,bytes),address)",
          )
          .staticCall(_request, _executor, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async removeEnqueueWhitelist(
      _actor: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("removeEnqueueWhitelist(address)")
          .staticCall(_actor, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async removeRollupWhitelist(
      _roller: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("removeRollupWhitelist(address)")
          .staticCall(_roller, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async rollup(
      _request: ICommitmentPool.RollupRequestStruct,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "rollup((((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint32,uint256,uint256))",
          )
          .staticCall(_request, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setMinRollupFee(
      _minRollupFee: BigNumberish,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setMinRollupFee(uint256)")
          .staticCall(_minRollupFee, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setRollupWhitelistDisabled(
      _state: boolean,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setRollupWhitelistDisabled(bool)")
          .staticCall(_state, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setSanctionCheckDisabled(
      _state: boolean,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setSanctionCheckDisabled(bool)")
          .staticCall(_state, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async setVerifierUpdateDisabled(
      _state: boolean,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("setVerifierUpdateDisabled(bool)")
          .staticCall(_state, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async transact(
      _request: ICommitmentPool.TransactRequestStruct,
      _signature: BytesLike,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction(
            "transact((((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256,uint256[],uint256[],bytes32,uint256,uint256,uint256[],uint256[],address,address,bytes[]),bytes)",
          )
          .staticCall(_request, _signature, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
    async updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides,
      preparedData?: PreparedData,
      ethCallContext?: EthCallContext,
    ): Promise<void> {
      try {
        return await this.contract
          .getFunction("updateSanctionsListAddress(address)")
          .staticCall(_sanction, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw transformEtherError(e, undefined, stack);
      }
    },
  };

  encodeCall = {
    _pathIndices(
      _fullPath: BigNumberish,
      _rollupSize: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "_pathIndices",
        "function _pathIndices(uint256,uint32)",
        [_fullPath, _rollupSize],
      );
    },
    addEnqueueWhitelist(
      _actor: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "addEnqueueWhitelist",
        "function addEnqueueWhitelist(address)",
        [_actor],
      );
    },
    addRollupWhitelist(
      _roller: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "addRollupWhitelist",
        "function addRollupWhitelist(address)",
        [_roller],
      );
    },
    assetType(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "assetType",
        "function assetType()",
        [],
      );
    },
    c_42ae54c0(
      c__42ae54c0: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_42ae54c0",
        "function c_42ae54c0(bytes8)",
        [c__42ae54c0],
      );
    },
    c_9f3d2211(
      c__9f3d2211: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_9f3d2211",
        "function c_9f3d2211(bytes8)",
        [c__9f3d2211],
      );
    },
    c_bfaab06f(
      c__bfaab06f: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_bfaab06f",
        "function c_bfaab06f(bytes8)",
        [c__bfaab06f],
      );
    },
    c_false42ae54c0(
      c__42ae54c0: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_false42ae54c0",
        "function c_false42ae54c0(bytes8)",
        [c__42ae54c0],
      );
    },
    c_false9f3d2211(
      c__9f3d2211: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_false9f3d2211",
        "function c_false9f3d2211(bytes8)",
        [c__9f3d2211],
      );
    },
    c_falsebfaab06f(
      c__bfaab06f: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_falsebfaab06f",
        "function c_falsebfaab06f(bytes8)",
        [c__bfaab06f],
      );
    },
    c_true42ae54c0(
      c__42ae54c0: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_true42ae54c0",
        "function c_true42ae54c0(bytes8)",
        [c__42ae54c0],
      );
    },
    c_true9f3d2211(
      c__9f3d2211: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_true9f3d2211",
        "function c_true9f3d2211(bytes8)",
        [c__9f3d2211],
      );
    },
    c_truebfaab06f(
      c__bfaab06f: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "c_truebfaab06f",
        "function c_truebfaab06f(bytes8)",
        [c__bfaab06f],
      );
    },
    changeOperator(
      _newOperator: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "changeOperator",
        "function changeOperator(address)",
        [_newOperator],
      );
    },
    disableRollupVerifier(
      _rollupSize: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "disableRollupVerifier",
        "function disableRollupVerifier(uint32)",
        [_rollupSize],
      );
    },
    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "disableTransactVerifier",
        "function disableTransactVerifier(uint32,uint32)",
        [_numInputs, _numOutputs],
      );
    },
    enableRollupVerifier(
      _rollupSize: BigNumberish,
      _rollupVerifier: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "enableRollupVerifier",
        "function enableRollupVerifier(uint32,address)",
        [_rollupSize, _rollupVerifier],
      );
    },
    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      _transactVerifier: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "enableTransactVerifier",
        "function enableTransactVerifier(uint32,uint32,address)",
        [_numInputs, _numOutputs, _transactVerifier],
      );
    },
    enqueue(
      _request: ICommitmentPool.CommitmentRequestStruct,
      _executor: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "enqueue",
        "function enqueue((uint256,uint256,uint256,uint256,bytes),address)",
        [_request, _executor],
      );
    },
    getCommitmentIncludedCount(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getCommitmentIncludedCount",
        "function getCommitmentIncludedCount()",
        [],
      );
    },
    getMinRollupFee(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getMinRollupFee",
        "function getMinRollupFee()",
        [],
      );
    },
    getTreeCapacity(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "getTreeCapacity",
        "function getTreeCapacity()",
        [],
      );
    },
    isHistoricCommitment(
      _commitment: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "isHistoricCommitment",
        "function isHistoricCommitment(uint256)",
        [_commitment],
      );
    },
    isKnownRoot(root: BigNumberish, callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "isKnownRoot",
        "function isKnownRoot(uint256)",
        [root],
      );
    },
    isRollupWhitelistDisabled(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "isRollupWhitelistDisabled",
        "function isRollupWhitelistDisabled()",
        [],
      );
    },
    isSpentSerialNumber(
      _serialNumber: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "isSpentSerialNumber",
        "function isSpentSerialNumber(uint256)",
        [_serialNumber],
      );
    },
    isVerifierUpdateDisabled(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "isVerifierUpdateDisabled",
        "function isVerifierUpdateDisabled()",
        [],
      );
    },
    removeEnqueueWhitelist(
      _actor: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "removeEnqueueWhitelist",
        "function removeEnqueueWhitelist(address)",
        [_actor],
      );
    },
    removeRollupWhitelist(
      _roller: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "removeRollupWhitelist",
        "function removeRollupWhitelist(address)",
        [_roller],
      );
    },
    rollup(
      _request: ICommitmentPool.RollupRequestStruct,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "rollup",
        "function rollup((((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint32,uint256,uint256))",
        [_request],
      );
    },
    sanctionsCheckDisabled(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "sanctionsCheckDisabled",
        "function sanctionsCheckDisabled()",
        [],
      );
    },
    sanctionsList(callContext: EthCallContext): EthCallParam {
      return encodeCallData(
        callContext,
        "sanctionsList",
        "function sanctionsList()",
        [],
      );
    },
    setMinRollupFee(
      _minRollupFee: BigNumberish,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "setMinRollupFee",
        "function setMinRollupFee(uint256)",
        [_minRollupFee],
      );
    },
    setRollupWhitelistDisabled(
      _state: boolean,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "setRollupWhitelistDisabled",
        "function setRollupWhitelistDisabled(bool)",
        [_state],
      );
    },
    setSanctionCheckDisabled(
      _state: boolean,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "setSanctionCheckDisabled",
        "function setSanctionCheckDisabled(bool)",
        [_state],
      );
    },
    setVerifierUpdateDisabled(
      _state: boolean,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "setVerifierUpdateDisabled",
        "function setVerifierUpdateDisabled(bool)",
        [_state],
      );
    },
    transact(
      _request: ICommitmentPool.TransactRequestStruct,
      _signature: BytesLike,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "transact",
        "function transact((((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256,uint256[],uint256[],bytes32,uint256,uint256,uint256[],uint256[],address,address,bytes[]),bytes)",
        [_request, _signature],
      );
    },
    updateSanctionsListAddress(
      _sanction: string,
      callContext: EthCallContext,
    ): EthCallParam {
      return encodeCallData(
        callContext,
        "updateSanctionsListAddress",
        "function updateSanctionsListAddress(address)",
        [_sanction],
      );
    },
  };
}

export class CommitmentPoolBoundContractView extends BoundContractView<
  CommitmentPool,
  CommitmentPoolContractView
> {
  async _pathIndices(
    _fullPath: BigNumberish,
    _rollupSize: BigNumberish,
    overrides?: Overrides,
  ): Promise<bigint> {
    return await this.view._pathIndices(
      _fullPath,
      _rollupSize,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async assetType(overrides?: Overrides): Promise<bigint> {
    return await this.view.assetType(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_42ae54c0(
    c__42ae54c0: BytesLike,
    overrides?: Overrides,
  ): Promise<void> {
    return await this.view.c_42ae54c0(
      c__42ae54c0,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_9f3d2211(
    c__9f3d2211: BytesLike,
    overrides?: Overrides,
  ): Promise<void> {
    return await this.view.c_9f3d2211(
      c__9f3d2211,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_bfaab06f(
    c__bfaab06f: BytesLike,
    overrides?: Overrides,
  ): Promise<void> {
    return await this.view.c_bfaab06f(
      c__bfaab06f,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_false42ae54c0(
    c__42ae54c0: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.c_false42ae54c0(
      c__42ae54c0,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_false9f3d2211(
    c__9f3d2211: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.c_false9f3d2211(
      c__9f3d2211,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_falsebfaab06f(
    c__bfaab06f: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.c_falsebfaab06f(
      c__bfaab06f,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_true42ae54c0(
    c__42ae54c0: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.c_true42ae54c0(
      c__42ae54c0,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_true9f3d2211(
    c__9f3d2211: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.c_true9f3d2211(
      c__9f3d2211,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async c_truebfaab06f(
    c__bfaab06f: BytesLike,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.c_truebfaab06f(
      c__bfaab06f,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getCommitmentIncludedCount(overrides?: Overrides): Promise<bigint> {
    return await this.view.getCommitmentIncludedCount(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getMinRollupFee(overrides?: Overrides): Promise<bigint> {
    return await this.view.getMinRollupFee(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async getTreeCapacity(overrides?: Overrides): Promise<bigint> {
    return await this.view.getTreeCapacity(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isHistoricCommitment(
    _commitment: BigNumberish,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.isHistoricCommitment(
      _commitment,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isKnownRoot(
    root: BigNumberish,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.isKnownRoot(
      root,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isRollupWhitelistDisabled(overrides?: Overrides): Promise<boolean> {
    return await this.view.isRollupWhitelistDisabled(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isSpentSerialNumber(
    _serialNumber: BigNumberish,
    overrides?: Overrides,
  ): Promise<boolean> {
    return await this.view.isSpentSerialNumber(
      _serialNumber,
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async isVerifierUpdateDisabled(overrides?: Overrides): Promise<boolean> {
    return await this.view.isVerifierUpdateDisabled(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async sanctionsCheckDisabled(overrides?: Overrides): Promise<boolean> {
    return await this.view.sanctionsCheckDisabled(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  async sanctionsList(overrides?: Overrides): Promise<string> {
    return await this.view.sanctionsList(
      {
        blockTag: this.context.blockNumber,
        ...overrides,
      },
      this.context.preparedData,
      this.context.getEthCallContext(),
    );
  }

  callStatic = {
    view: this.view,
    context: this.context,

    async addEnqueueWhitelist(
      _actor: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.addEnqueueWhitelist(
        _actor,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async addRollupWhitelist(
      _roller: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.addRollupWhitelist(
        _roller,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async changeOperator(
      _newOperator: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.changeOperator(
        _newOperator,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.disableRollupVerifier(
        _rollupSize,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.disableTransactVerifier(
        _numInputs,
        _numOutputs,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async enableRollupVerifier(
      _rollupSize: BigNumberish,
      _rollupVerifier: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.enableRollupVerifier(
        _rollupSize,
        _rollupVerifier,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      _transactVerifier: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.enableTransactVerifier(
        _numInputs,
        _numOutputs,
        _transactVerifier,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async enqueue(
      _request: ICommitmentPool.CommitmentRequestStruct,
      _executor: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.enqueue(
        _request,
        _executor,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async removeEnqueueWhitelist(
      _actor: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.removeEnqueueWhitelist(
        _actor,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async removeRollupWhitelist(
      _roller: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.removeRollupWhitelist(
        _roller,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async rollup(
      _request: ICommitmentPool.RollupRequestStruct,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.rollup(
        _request,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setMinRollupFee(
      _minRollupFee: BigNumberish,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.setMinRollupFee(
        _minRollupFee,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setRollupWhitelistDisabled(
      _state: boolean,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.setRollupWhitelistDisabled(
        _state,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setSanctionCheckDisabled(
      _state: boolean,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.setSanctionCheckDisabled(
        _state,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async setVerifierUpdateDisabled(
      _state: boolean,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.setVerifierUpdateDisabled(
        _state,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async transact(
      _request: ICommitmentPool.TransactRequestStruct,
      _signature: BytesLike,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.transact(
        _request,
        _signature,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
    async updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides,
    ): Promise<void> {
      return await this.view.callStatic.updateSanctionsListAddress(
        _sanction,
        {
          blockTag: this.context.blockNumber,
          ...overrides,
        },
        this.context.preparedData,
        this.context.getEthCallContext(),
      );
    },
  };

  encodeCall = {
    view: this.view,
    context: this.context,

    _pathIndices(
      _fullPath: BigNumberish,
      _rollupSize: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall._pathIndices(_fullPath, _rollupSize, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    addEnqueueWhitelist(_actor: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.addEnqueueWhitelist(_actor, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    addRollupWhitelist(_roller: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.addRollupWhitelist(_roller, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    assetType(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.assetType({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_42ae54c0(c__42ae54c0: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.c_42ae54c0(c__42ae54c0, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_9f3d2211(c__9f3d2211: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.c_9f3d2211(c__9f3d2211, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_bfaab06f(c__bfaab06f: BytesLike, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.c_bfaab06f(c__bfaab06f, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_false42ae54c0(
      c__42ae54c0: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.c_false42ae54c0(c__42ae54c0, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_false9f3d2211(
      c__9f3d2211: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.c_false9f3d2211(c__9f3d2211, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_falsebfaab06f(
      c__bfaab06f: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.c_falsebfaab06f(c__bfaab06f, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_true42ae54c0(
      c__42ae54c0: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.c_true42ae54c0(c__42ae54c0, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_true9f3d2211(
      c__9f3d2211: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.c_true9f3d2211(c__9f3d2211, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    c_truebfaab06f(
      c__bfaab06f: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.c_truebfaab06f(c__bfaab06f, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    changeOperator(_newOperator: string, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.changeOperator(_newOperator, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.disableRollupVerifier(_rollupSize, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.disableTransactVerifier(
        _numInputs,
        _numOutputs,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    enableRollupVerifier(
      _rollupSize: BigNumberish,
      _rollupVerifier: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.enableRollupVerifier(
        _rollupSize,
        _rollupVerifier,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      _transactVerifier: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.enableTransactVerifier(
        _numInputs,
        _numOutputs,
        _transactVerifier,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides),
        },
      );
    },
    enqueue(
      _request: ICommitmentPool.CommitmentRequestStruct,
      _executor: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.enqueue(_request, _executor, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getCommitmentIncludedCount(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getCommitmentIncludedCount({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getMinRollupFee(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getMinRollupFee({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    getTreeCapacity(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.getTreeCapacity({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    isHistoricCommitment(
      _commitment: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.isHistoricCommitment(_commitment, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    isKnownRoot(root: BigNumberish, overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.isKnownRoot(root, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    isRollupWhitelistDisabled(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.isRollupWhitelistDisabled({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    isSpentSerialNumber(
      _serialNumber: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.isSpentSerialNumber(_serialNumber, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    isVerifierUpdateDisabled(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.isVerifierUpdateDisabled({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    removeEnqueueWhitelist(
      _actor: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.removeEnqueueWhitelist(_actor, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    removeRollupWhitelist(
      _roller: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.removeRollupWhitelist(_roller, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    rollup(
      _request: ICommitmentPool.RollupRequestStruct,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.rollup(_request, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    sanctionsCheckDisabled(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.sanctionsCheckDisabled({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    sanctionsList(overrides?: Overrides): EthCallParam {
      return this.view.encodeCall.sanctionsList({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setMinRollupFee(
      _minRollupFee: BigNumberish,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.setMinRollupFee(_minRollupFee, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setRollupWhitelistDisabled(
      _state: boolean,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.setRollupWhitelistDisabled(_state, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setSanctionCheckDisabled(
      _state: boolean,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.setSanctionCheckDisabled(_state, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    setVerifierUpdateDisabled(
      _state: boolean,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.setVerifierUpdateDisabled(_state, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    transact(
      _request: ICommitmentPool.TransactRequestStruct,
      _signature: BytesLike,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.transact(_request, _signature, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
    updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides,
    ): EthCallParam {
      return this.view.encodeCall.updateSanctionsListAddress(_sanction, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides),
      });
    },
  };
}

export type CommitmentPoolContext = ContractContext<
  CommitmentPool,
  CommitmentPoolBoundContractView
>;

export class CommitmentPoolProcessor extends BaseProcessor<
  CommitmentPool,
  CommitmentPoolBoundContractView
> {
  onEventCommitmentIncluded(
    handler: (
      event: CommitmentIncludedEvent,
      ctx: CommitmentPoolContext,
    ) => void,
    filter?: CommitmentIncludedEventFilter | CommitmentIncludedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitmentIncludedEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["CommitmentIncluded(uint256)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventCommitmentQueued(
    handler: (event: CommitmentQueuedEvent, ctx: CommitmentPoolContext) => void,
    filter?: CommitmentQueuedEventFilter | CommitmentQueuedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitmentQueuedEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "CommitmentQueued(uint256,uint256,uint256,bytes)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventCommitmentSpent(
    handler: (event: CommitmentSpentEvent, ctx: CommitmentPoolContext) => void,
    filter?: CommitmentSpentEventFilter | CommitmentSpentEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitmentSpentEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["CommitmentSpent(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRollupWhitelistDisabled(
    handler: (
      event: RollupWhitelistDisabledEvent,
      ctx: CommitmentPoolContext,
    ) => void,
    filter?:
      | RollupWhitelistDisabledEventFilter
      | RollupWhitelistDisabledEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RollupWhitelistDisabledEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["RollupWhitelistDisabled(bool)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventSanctionsCheckDisabled(
    handler: (
      event: SanctionsCheckDisabledEvent,
      ctx: CommitmentPoolContext,
    ) => void,
    filter?:
      | SanctionsCheckDisabledEventFilter
      | SanctionsCheckDisabledEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: SanctionsCheckDisabledEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["SanctionsCheckDisabled(bool)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventSanctionsList(
    handler: (event: SanctionsListEvent, ctx: CommitmentPoolContext) => void,
    filter?: SanctionsListEventFilter | SanctionsListEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: SanctionsListEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["SanctionsList(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventVerifierUpdateDisabled(
    handler: (
      event: VerifierUpdateDisabledEvent,
      ctx: CommitmentPoolContext,
    ) => void,
    filter?:
      | VerifierUpdateDisabledEventFilter
      | VerifierUpdateDisabledEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: VerifierUpdateDisabledEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["VerifierUpdateDisabled(bool)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onCall_pathIndices(
    handler: (call: _pathIndicesCallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: _pathIndicesCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf2da1d41",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAddEnqueueWhitelist(
    handler: (
      call: AddEnqueueWhitelistCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AddEnqueueWhitelistCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa9b1d296",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAddRollupWhitelist(
    handler: (
      call: AddRollupWhitelistCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AddRollupWhitelistCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x02d498f1",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallAssetType(
    handler: (call: AssetTypeCallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: AssetTypeCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3fe3347a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_42ae54c0(
    handler: (call: C_42ae54c0CallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_42ae54c0CallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3ffe6145",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_9f3d2211(
    handler: (call: C_9f3d2211CallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_9f3d2211CallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xca32fa71",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_bfaab06f(
    handler: (call: C_bfaab06fCallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_bfaab06fCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x5276cbc6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_false42ae54c0(
    handler: (
      call: C_false42ae54c0CallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_false42ae54c0CallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x0c73af41",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_false9f3d2211(
    handler: (
      call: C_false9f3d2211CallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_false9f3d2211CallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x53cab856",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_falsebfaab06f(
    handler: (
      call: C_falsebfaab06fCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_falsebfaab06fCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xddfa5bb7",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_true42ae54c0(
    handler: (
      call: C_true42ae54c0CallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_true42ae54c0CallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa31f44af",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_true9f3d2211(
    handler: (
      call: C_true9f3d2211CallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_true9f3d2211CallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x1e8c4757",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallC_truebfaab06f(
    handler: (
      call: C_truebfaab06fCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: C_truebfaab06fCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf9c3ad08",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallChangeOperator(
    handler: (
      call: ChangeOperatorCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: ChangeOperatorCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x06394c9b",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallDisableRollupVerifier(
    handler: (
      call: DisableRollupVerifierCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: DisableRollupVerifierCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9b0a6fea",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallDisableTransactVerifier(
    handler: (
      call: DisableTransactVerifierCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: DisableTransactVerifierCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xc259e2e6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallEnableRollupVerifier(
    handler: (
      call: EnableRollupVerifierCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: EnableRollupVerifierCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xdeeff7cd",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallEnableTransactVerifier(
    handler: (
      call: EnableTransactVerifierCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: EnableTransactVerifierCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x7fa4b09c",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallEnqueue(
    handler: (call: EnqueueCallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: EnqueueCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x78d60cd7",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetCommitmentIncludedCount(
    handler: (
      call: GetCommitmentIncludedCountCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetCommitmentIncludedCountCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xe500f504",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetMinRollupFee(
    handler: (
      call: GetMinRollupFeeCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetMinRollupFeeCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xb08892d0",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallGetTreeCapacity(
    handler: (
      call: GetTreeCapacityCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: GetTreeCapacityCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x484eb652",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsHistoricCommitment(
    handler: (
      call: IsHistoricCommitmentCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsHistoricCommitmentCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x57060016",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsKnownRoot(
    handler: (call: IsKnownRootCallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsKnownRootCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xa6232a93",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsRollupWhitelistDisabled(
    handler: (
      call: IsRollupWhitelistDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsRollupWhitelistDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xffa89b88",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsSpentSerialNumber(
    handler: (
      call: IsSpentSerialNumberCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsSpentSerialNumberCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3bb8d1b4",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallIsVerifierUpdateDisabled(
    handler: (
      call: IsVerifierUpdateDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: IsVerifierUpdateDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x4eb069f7",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRemoveEnqueueWhitelist(
    handler: (
      call: RemoveEnqueueWhitelistCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RemoveEnqueueWhitelistCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x03db9874",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRemoveRollupWhitelist(
    handler: (
      call: RemoveRollupWhitelistCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RemoveRollupWhitelistCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x9cc6b354",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallRollup(
    handler: (call: RollupCallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: RollupCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x14a7737d",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSanctionsCheckDisabled(
    handler: (
      call: SanctionsCheckDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SanctionsCheckDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x830d9ebe",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSanctionsList(
    handler: (call: SanctionsListCallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SanctionsListCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xec571c6a",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetMinRollupFee(
    handler: (
      call: SetMinRollupFeeCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetMinRollupFeeCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x7cbf0ff6",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetRollupWhitelistDisabled(
    handler: (
      call: SetRollupWhitelistDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetRollupWhitelistDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xf8f05388",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetSanctionCheckDisabled(
    handler: (
      call: SetSanctionCheckDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetSanctionCheckDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x06b2ad59",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallSetVerifierUpdateDisabled(
    handler: (
      call: SetVerifierUpdateDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: SetVerifierUpdateDisabledCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0xb3b75631",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallTransact(
    handler: (call: TransactCallTrace, ctx: CommitmentPoolContext) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: TransactCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x3fae882e",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  onCallUpdateSanctionsListAddress(
    handler: (
      call: UpdateSanctionsListAddressCallTrace,
      ctx: CommitmentPoolContext,
    ) => void,
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      call: UpdateSanctionsListAddressCallTrace,
      ctx: CommitmentPoolContext,
    ) => Promise<PreprocessResult>,
  ): this {
    return super.onEthTrace(
      "0x30f49cac",
      handler as any,
      fetchConfig,
      preprocessHandler,
    );
  }

  public static filters = {
    CommitmentIncluded(
      commitment?: BigNumberish | null,
    ): CommitmentIncludedEventFilter {
      return templateContract.filters["CommitmentIncluded(uint256)"](
        commitment,
      );
    },
    CommitmentQueued(
      commitment?: BigNumberish | null,
      rollupFee?: null,
      leafIndex?: null,
      encryptedNote?: null,
    ): CommitmentQueuedEventFilter {
      return templateContract.filters[
        "CommitmentQueued(uint256,uint256,uint256,bytes)"
      ](commitment, rollupFee, leafIndex, encryptedNote);
    },
    CommitmentSpent(
      rootHash?: BigNumberish | null,
      serialNumber?: BigNumberish | null,
    ): CommitmentSpentEventFilter {
      return templateContract.filters["CommitmentSpent(uint256,uint256)"](
        rootHash,
        serialNumber,
      );
    },
    RollupWhitelistDisabled(state?: null): RollupWhitelistDisabledEventFilter {
      return templateContract.filters["RollupWhitelistDisabled(bool)"](state);
    },
    SanctionsCheckDisabled(state?: null): SanctionsCheckDisabledEventFilter {
      return templateContract.filters["SanctionsCheckDisabled(bool)"](state);
    },
    SanctionsList(sanctions?: null): SanctionsListEventFilter {
      return templateContract.filters["SanctionsList(address)"](sanctions);
    },
    VerifierUpdateDisabled(state?: null): VerifierUpdateDisabledEventFilter {
      return templateContract.filters["VerifierUpdateDisabled(bool)"](state);
    },
  };

  protected CreateBoundContractView(): CommitmentPoolBoundContractView {
    const view = getCommitmentPoolContract(
      this.config.network,
      this.config.address,
    );
    return new CommitmentPoolBoundContractView(this.config.address, view);
  }

  public static bind(options: BindOptions): CommitmentPoolProcessor {
    if (!options.name) {
      options.name = "CommitmentPool";
    }
    let processor = getProcessor(options) as CommitmentPoolProcessor;
    if (!processor) {
      processor = new CommitmentPoolProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }
}

export class CommitmentPoolProcessorTemplate extends BaseProcessorTemplate<
  CommitmentPool,
  CommitmentPoolBoundContractView
> {
  bindInternal(options: BindOptions) {
    if (!options.name) {
      options.name = "CommitmentPool";
    }
    let processor = getProcessor(options) as CommitmentPoolProcessor;
    if (!processor) {
      processor = new CommitmentPoolProcessor(options);
      addProcessor(options, processor);
    }
    return processor;
  }

  onEventCommitmentIncluded(
    handler: (
      event: CommitmentIncludedEvent,
      ctx: CommitmentPoolContext,
    ) => void,
    filter?: CommitmentIncludedEventFilter | CommitmentIncludedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitmentIncludedEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["CommitmentIncluded(uint256)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventCommitmentQueued(
    handler: (event: CommitmentQueuedEvent, ctx: CommitmentPoolContext) => void,
    filter?: CommitmentQueuedEventFilter | CommitmentQueuedEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitmentQueuedEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters[
        "CommitmentQueued(uint256,uint256,uint256,bytes)"
      ](null, null, null, null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventCommitmentSpent(
    handler: (event: CommitmentSpentEvent, ctx: CommitmentPoolContext) => void,
    filter?: CommitmentSpentEventFilter | CommitmentSpentEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: CommitmentSpentEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["CommitmentSpent(uint256,uint256)"](
        null,
        null,
      );
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventRollupWhitelistDisabled(
    handler: (
      event: RollupWhitelistDisabledEvent,
      ctx: CommitmentPoolContext,
    ) => void,
    filter?:
      | RollupWhitelistDisabledEventFilter
      | RollupWhitelistDisabledEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: RollupWhitelistDisabledEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["RollupWhitelistDisabled(bool)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventSanctionsCheckDisabled(
    handler: (
      event: SanctionsCheckDisabledEvent,
      ctx: CommitmentPoolContext,
    ) => void,
    filter?:
      | SanctionsCheckDisabledEventFilter
      | SanctionsCheckDisabledEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: SanctionsCheckDisabledEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["SanctionsCheckDisabled(bool)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventSanctionsList(
    handler: (event: SanctionsListEvent, ctx: CommitmentPoolContext) => void,
    filter?: SanctionsListEventFilter | SanctionsListEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: SanctionsListEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["SanctionsList(address)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }

  onEventVerifierUpdateDisabled(
    handler: (
      event: VerifierUpdateDisabledEvent,
      ctx: CommitmentPoolContext,
    ) => void,
    filter?:
      | VerifierUpdateDisabledEventFilter
      | VerifierUpdateDisabledEventFilter[],
    fetchConfig?: Partial<EthFetchConfig>,
    preprocessHandler?: (
      event: VerifierUpdateDisabledEvent,
      ctx: CommitmentPoolContext,
      preprocessStore: { [k: string]: any },
    ) => Promise<PreprocessResult>,
  ): this {
    if (!filter) {
      filter = templateContract.filters["VerifierUpdateDisabled(bool)"](null);
    }
    return super.onEthEvent(handler, filter!, fetchConfig, preprocessHandler);
  }
}

export function getCommitmentPoolContract(
  chainId: EthChainId,
  address: string,
): CommitmentPoolContractView {
  let contract = getContractByABI(
    "CommitmentPool",
    address,
    chainId,
  ) as CommitmentPoolContractView;
  if (!contract) {
    const rawContract = CommitmentPool__factory.connect(
      address,
      getProvider(chainId as any),
    );
    contract = new CommitmentPoolContractView(rawContract);
    addContractByABI("CommitmentPool", address, chainId, contract);
  }
  return contract;
}

export function getCommitmentPoolContractOnContext(
  context: EthContext,
  address: string,
): CommitmentPoolBoundContractView {
  const view = getCommitmentPoolContract(context.getChainId(), address);
  const boundView = new CommitmentPoolBoundContractView(address, view);
  boundView.context = context;
  if (boundView.callStatic) {
    boundView.callStatic.context = context;
  }
  return boundView;
}
